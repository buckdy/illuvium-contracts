{
  "address": "0xEeD0851E7E51De44bFad160320A504418b60a49c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        }
      ],
      "name": "BaseUriUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imxMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        },
        {
          "internalType": "enum BoxType",
          "name": "boxType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "skinId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bodyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eyeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "headId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "propsId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "mintingBlob",
          "type": "bytes"
        }
      ],
      "name": "mintFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri_",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x292498cce7f524ce89c189fddf6b72ddf1df81ab03c409daf7e34d6df6f275be",
  "receipt": {
    "to": null,
    "from": "0xA4e47B38415201d4c8aB42711892A31C7B06bdE9",
    "contractAddress": "0xEeD0851E7E51De44bFad160320A504418b60a49c",
    "transactionIndex": 7,
    "gasUsed": "2269054",
    "logsBloom": "0x
    "blockHash": "0xc8ab6de79c2281aa8f67ab3492344a65d0516106341996296757ba55e0cc7cdb",
    "transactionHash": "0x292498cce7f524ce89c189fddf6b72ddf1df81ab03c409daf7e34d6df6f275be",
    "logs": [],
    "blockNumber": 12236229,
    "cumulativeGasUsed": "2801849",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9bdc976d344bc2eb84329ce4b7643821",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"BaseUriUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imxMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"enum BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"skinId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bodyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eyeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"headId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"propsId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"mintingBlob\",\"type\":\"bytes\"}],\"name\":\"mintFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri_\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Dmitry Yakovlevich\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string,address)\":{\"params\":{\"_minter\":\"NFT Minter Address.\",\"name_\":\"NFT Name.\",\"symbol_\":\"NFT Symbol.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseUri(string)\":{\"details\":\"only owner can call this function.\",\"params\":{\"_baseUri_\":\"base URI.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PortraitLayer, this contract is inherited BaseIlluvitar contract, this contract contains the function of combination and NFT metadata.\",\"version\":1},\"userdoc\":{\"events\":{\"BaseUriUpdated(string)\":{\"notice\":\"event emitted when base URI is set.\"}},\"kind\":\"user\",\"methods\":{\"initialize(string,string,address)\":{\"notice\":\"Initialize Base Layer.\"},\"setBaseUri(string)\":{\"notice\":\"Set base URI\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PortraitLayer.sol\":\"PortraitLayer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@imtbl/imx-contracts/contracts/IMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMintable {\\n    function mintFor(\\n        address to,\\n        uint256 quantity,\\n        bytes calldata mintingBlob\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf072bb2dd72fac9fbdfffd52756621718d32d3253cd942ddfbe1c88d4ed774ab\",\"license\":\"MIT\"},\"@imtbl/imx-contracts/contracts/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary Bytes {\\n    /**\\n     * @dev Converts a `uint256` to a `string`.\\n     * via OraclizeAPI - MIT licence\\n     * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n     */\\n    function fromUint(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + (temp % 10)));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    bytes constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * Index Of\\n     *\\n     * Locates and returns the position of a character within a string starting\\n     * from a defined offset\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string acting as the haystack to be\\n     *              searched\\n     * @param _value The needle to search for, at present this is currently\\n     *               limited to one character\\n     * @param _offset The starting point to start searching from which can start\\n     *                from 0, but must not exceed the length of the string\\n     * @return int The position of the needle starting from 0 and returning -1\\n     *             in the case of no matches found\\n     */\\n    function indexOf(\\n        bytes memory _base,\\n        string memory _value,\\n        uint256 _offset\\n    ) internal pure returns (int256) {\\n        bytes memory _valueBytes = bytes(_value);\\n\\n        assert(_valueBytes.length == 1);\\n\\n        for (uint256 i = _offset; i < _base.length; i++) {\\n            if (_base[i] == _valueBytes[0]) {\\n                return int256(i);\\n            }\\n        }\\n\\n        return -1;\\n    }\\n\\n    function substring(\\n        bytes memory strBytes,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) internal pure returns (string memory) {\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    function toUint(bytes memory b) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            uint256 val = uint256(uint8(b[i]));\\n            if (val >= 48 && val <= 57) {\\n                // input is 0-9\\n                result = result * 10 + (val - 48);\\n            } else {\\n                // invalid character, expecting integer input\\n                revert(\\\"invalid input, only numbers allowed\\\");\\n            }\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa35e6f7fb3abf7501a3590e067919d8eaa95d660da128e8a5a29d00b548998d4\",\"license\":\"MIT\"},\"@imtbl/imx-contracts/contracts/utils/Minting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Bytes.sol\\\";\\n\\nlibrary Minting {\\n    // Split the minting blob into token_id and blueprint portions\\n    // {token_id}:{blueprint}\\n\\n    function split(bytes calldata blob)\\n        internal\\n        pure\\n        returns (uint256, bytes memory)\\n    {\\n        int256 index = Bytes.indexOf(blob, \\\":\\\", 0);\\n        require(index >= 0, \\\"Separator must exist\\\");\\n        // Trim the { and } from the parameters\\n        uint256 tokenID = Bytes.toUint(blob[1:uint256(index) - 1]);\\n        uint256 blueprintLength = blob.length - uint256(index) - 3;\\n        if (blueprintLength == 0) {\\n            return (tokenID, bytes(\\\"\\\"));\\n        }\\n        bytes calldata blueprint = blob[uint256(index) + 2:blob.length - 1];\\n        return (tokenID, blueprint);\\n    }\\n}\\n\",\"keccak256\":\"0x40205ad3ae7575ee24847b05de53f1c1851270b885cffaec46994642cebd3083\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x49915fbc84c030ba425312356c1a0a28f81cdee5ab637f7a264752b52243fec6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8116b65b11e0a65ad6cf40cf2d71d2dacad80ddc37ad42af965fc919afb19e5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5f8d2e5137f7603eeaa0516e5b40dc6e637f179edea8134f1dbef9754c9baf2b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Enumerable_init_unchained();\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal initializer {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xe3bdc0a0942d52ce8d7e968986db04b58f377661520067ea0087a5690afe7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf504eeb1d445ef4e4b4b2726d4776a01299c8e1715962ac2aeccb7be85c45246\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe0091487bb0da2016b050e276b74e83a3a4fa641f65600558281a3dc3ef24994\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"contracts/BaseIlluvitar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@imtbl/imx-contracts/contracts/IMintable.sol\\\";\\nimport \\\"@imtbl/imx-contracts/contracts/utils/Minting.sol\\\";\\n\\n/**\\n    @title BaseIlluvitar, this contract is inherited from OZ ERC721 contract,\\n    this contains base functions which can be used in Base Layer and Accessory Contract.\\n    @dev abstract contract!\\n    @author Dmitry Yakovlevich\\n */\\n\\nabstract contract BaseIlluvitar is ERC721EnumerableUpgradeable, OwnableUpgradeable, IMintable {\\n    /**\\n     * @notice event emitted when base URI is set.\\n     * @dev emitted in {setBaseUri} function.\\n     * @param baseUri new base uri.\\n     */\\n    event BaseUriUpdated(string baseUri);\\n\\n    // NFT Minter Address.\\n    address public imxMinter;\\n    string internal __baseUri;\\n\\n    /**\\n     * @notice Initialize Base Illuvitar.\\n     * @param name_ NFT Name.\\n     * @param symbol_ NFT Symbol.\\n     * @param imxMinter_ NFT Minter Address.\\n     */\\n    function __BaseIlluvitar_init(\\n        string memory name_,\\n        string memory symbol_,\\n        address imxMinter_\\n    ) internal initializer {\\n        __ERC721_init(name_, symbol_);\\n        __ERC721Enumerable_init();\\n        __Ownable_init();\\n\\n        require(imxMinter_ != address(0), \\\"Minter cannot zero\\\");\\n        imxMinter = imxMinter_;\\n    }\\n\\n    /**\\n     * @notice Set base URI\\n     * @dev only owner can call this function.\\n     * @param _baseUri_ base URI.\\n     */\\n    function setBaseUri(string memory _baseUri_) external onlyOwner {\\n        __baseUri = _baseUri_;\\n\\n        emit BaseUriUpdated(_baseUri_);\\n    }\\n\\n    /**\\n     * @notice Return _baseURI - this is used to make tokenURI\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return __baseUri;\\n    }\\n\\n    /**\\n     * @notice Safely mint.\\n     * @dev inaccessible from outside.\\n     * @param to NFT recipient address.\\n     * @param tokenId NFT tokenId.\\n     * @param blueprint mint data.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory blueprint\\n    ) internal virtual;\\n\\n    function mintFor(\\n        address to,\\n        uint256 quantity,\\n        bytes calldata mintingBlob\\n    ) external override {\\n        require(quantity == 1, \\\"Amount must be 1\\\");\\n        require(msg.sender == imxMinter, \\\"caller is not minter\\\");\\n        (uint256 id, bytes memory blueprint) = Minting.split(mintingBlob);\\n        _mint(to, id, blueprint);\\n    }\\n}\\n\",\"keccak256\":\"0xa9d9a84376caef10ce520a259f9e97127f5da1b5d3252d8766e4104335dbf47e\",\"license\":\"MIT\"},\"contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nenum AccessoryType {\\r\\n    Skin,\\r\\n    Body,\\r\\n    EyeWear,\\r\\n    HeadWear,\\r\\n    Props\\r\\n}\\r\\n\\r\\nenum BoxType {\\r\\n    Virtual,\\r\\n    Bronze,\\r\\n    Silver,\\r\\n    Gold,\\r\\n    Platinum,\\r\\n    Diamond\\r\\n}\\r\\n\",\"keccak256\":\"0x8d3e2db2764d02482335033be2f19e962b827985980fd83e73164bc424d60b4a\",\"license\":\"MIT\"},\"contracts/PortraitLayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"./BaseIlluvitar.sol\\\";\\nimport \\\"./DataTypes.sol\\\";\\n\\n/**\\n    @title PortraitLayer, this contract is inherited BaseIlluvitar contract,\\n    this contract contains the function of combination and NFT metadata.\\n    @author Dmitry Yakovlevich\\n */\\n\\ncontract PortraitLayer is BaseIlluvitar {\\n    struct Metadata {\\n        bool initialized;\\n        BoxType boxType;\\n        uint8 tier;\\n        // Bonded accessory token ids\\n        uint256 skinId;\\n        uint256 bodyId;\\n        uint256 eyeId;\\n        uint256 headId;\\n        uint256 propsId;\\n    }\\n\\n    mapping(uint256 => Metadata) public metadata;\\n\\n    /**\\n     * @notice Initialize Base Layer.\\n     * @param name_ NFT Name.\\n     * @param symbol_ NFT Symbol.\\n     * @param _minter NFT Minter Address.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address _minter\\n    ) external initializer {\\n        __BaseIlluvitar_init(name_, symbol_, _minter);\\n    }\\n\\n    function _mint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory blueprint\\n    ) internal override {\\n        _safeMint(to, tokenId);\\n        if (!metadata[tokenId].initialized) {\\n            (\\n                BoxType boxType,\\n                uint8 tier,\\n                uint256 skinTokenId,\\n                uint256 bodyTokenId,\\n                uint256 eyeTokenId,\\n                uint256 headTokenId,\\n                uint256 propsTokenId\\n            ) = abi.decode(blueprint, (BoxType, uint8, uint256, uint256, uint256, uint256, uint256));\\n            metadata[tokenId] = Metadata({\\n                initialized: true,\\n                boxType: boxType,\\n                tier: tier,\\n                skinId: skinTokenId,\\n                bodyId: bodyTokenId,\\n                eyeId: eyeTokenId,\\n                headId: headTokenId,\\n                propsId: propsTokenId\\n            });\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb0bb39db547f5774e21cc9bc381bf1b55f7cee180980196d9aba024a05257edb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612817806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063b88d4fde1161007c578063b88d4fde146102cb578063c87b56dd146102de578063e3684e39146102f1578063e985e9c51461035b578063f2fde38b14610397578063fb91a7d2146103aa57600080fd5b806370a0823114610271578063715018a6146102845780638da5cb5b1461028c57806395d89b411461029d578063a0bcfc7f146102a5578063a22cb465146102b857600080fd5b806319ee6e3f1161011557806319ee6e3f146101ff57806323b872dd146102125780632f745c591461022557806342842e0e146102385780634f6ccce71461024b5780636352211e1461025e57600080fd5b806301ffc9a71461015d57806306fdde0314610185578063077f224a1461019a578063081812fc146101af578063095ea7b3146101da57806318160ddd146101ed575b600080fd5b61017061016b366004611fe2565b6103bd565b60405190151581526020015b60405180910390f35b61018d6103e8565b60405161017c9190612057565b6101ad6101a8366004612132565b61047a565b005b6101c26101bd3660046121a6565b6104fd565b6040516001600160a01b03909116815260200161017c565b6101ad6101e83660046121bf565b610592565b6099545b60405190815260200161017c565b6101ad61020d3660046121e9565b6106a8565b6101ad610220366004612270565b610760565b6101f16102333660046121bf565b610791565b6101ad610246366004612270565b610827565b6101f16102593660046121a6565b610842565b6101c261026c3660046121a6565b6108d5565b6101f161027f3660046122ac565b61094c565b6101ad6109d3565b60c9546001600160a01b03166101c2565b61018d610a09565b6101ad6102b33660046122c7565b610a18565b6101ad6102c63660046122fc565b610a90565b6101ad6102d9366004612338565b610a9f565b61018d6102ec3660046121a6565b610ad1565b6103476102ff3660046121a6565b60fd6020526000908152604090208054600182015460028301546003840154600485015460059095015460ff8086169661010087048216966201000090049091169493929188565b60405161017c9897969594939291906123ca565b61017061036936600461242a565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6101ad6103a53660046122ac565b610bac565b60fb546101c2906001600160a01b031681565b60006001600160e01b0319821663780e9d6360e01b14806103e257506103e282610c47565b92915050565b6060606580546103f79061245d565b80601f01602080910402602001604051908101604052809291908181526020018280546104239061245d565b80156104705780601f1061044557610100808354040283529160200191610470565b820191906000526020600020905b81548152906001019060200180831161045357829003601f168201915b5050505050905090565b600054610100900460ff1680610493575060005460ff16155b6104b85760405162461bcd60e51b81526004016104af90612498565b60405180910390fd5b600054610100900460ff161580156104da576000805461ffff19166101011790555b6104e5848484610c97565b80156104f7576000805461ff00191690555b50505050565b6000818152606760205260408120546001600160a01b03166105765760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104af565b506000908152606960205260409020546001600160a01b031690565b600061059d826108d5565b9050806001600160a01b0316836001600160a01b0316141561060b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104af565b336001600160a01b038216148061062757506106278133610369565b6106995760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016104af565b6106a38383610d85565b505050565b826001146106eb5760405162461bcd60e51b815260206004820152601060248201526f416d6f756e74206d757374206265203160801b60448201526064016104af565b60fb546001600160a01b0316331461073c5760405162461bcd60e51b815260206004820152601460248201527331b0b63632b91034b9903737ba1036b4b73a32b960611b60448201526064016104af565b6000806107498484610df3565b91509150610758868383610fae565b505050505050565b61076a3382611100565b6107865760405162461bcd60e51b81526004016104af906124e6565b6106a38383836111f7565b600061079c8361094c565b82106107fe5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016104af565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b6106a383838360405180602001604052806000815250610a9f565b600061084d60995490565b82106108b05760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016104af565b609982815481106108c3576108c3612537565b90600052602060002001549050919050565b6000818152606760205260408120546001600160a01b0316806103e25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104af565b60006001600160a01b0382166109b75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104af565b506001600160a01b031660009081526068602052604090205490565b60c9546001600160a01b031633146109fd5760405162461bcd60e51b81526004016104af9061254d565b610a0760006113a2565b565b6060606680546103f79061245d565b60c9546001600160a01b03163314610a425760405162461bcd60e51b81526004016104af9061254d565b8051610a559060fc906020840190611f33565b507f24a9152dc695ecc801ad580886331ee12d7aac0fa2ae341a5ae3c2ccae36cb4f81604051610a859190612057565b60405180910390a150565b610a9b3383836113f4565b5050565b610aa93383611100565b610ac55760405162461bcd60e51b81526004016104af906124e6565b6104f7848484846114c3565b6000818152606760205260409020546060906001600160a01b0316610b505760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016104af565b6000610b5a6114f6565b90506000815111610b7a5760405180602001604052806000815250610ba5565b80610b8484611505565b604051602001610b95929190612582565b6040516020818303038152906040525b9392505050565b60c9546001600160a01b03163314610bd65760405162461bcd60e51b81526004016104af9061254d565b6001600160a01b038116610c3b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104af565b610c44816113a2565b50565b60006001600160e01b031982166380ac58cd60e01b1480610c7857506001600160e01b03198216635b5e139f60e01b145b806103e257506301ffc9a760e01b6001600160e01b03198316146103e2565b600054610100900460ff1680610cb0575060005460ff16155b610ccc5760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff16158015610cee576000805461ffff19166101011790555b610cf88484611603565b610d0061168a565b610d0861170d565b6001600160a01b038216610d535760405162461bcd60e51b81526020600482015260126024820152714d696e7465722063616e6e6f74207a65726f60701b60448201526064016104af565b60fb80546001600160a01b0319166001600160a01b03841617905580156104f7576000805461ff001916905550505050565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610dba826108d5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600060606000610e5185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040805180820190915260018152601d60f91b6020820152935091506117749050565b90506000811215610e9b5760405162461bcd60e51b815260206004820152601460248201527314d95c185c985d1bdc881b5d5cdd08195e1a5cdd60621b60448201526064016104af565b6000610ef586600187610eae82876125c7565b92610ebb939291906125de565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061180c92505050565b905060006003610f0584886125c7565b610f0f91906125c7565b905080610f3357816040518060200160405280600081525094509450505050610fa7565b3660008888610f43876002612608565b90610f4f60018c6125c7565b92610f5c939291906125de565b9150915083828281818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250959c50919a50505050505050505050505b9250929050565b610fb883836118e4565b600082815260fd602052604090205460ff166106a357600080600080600080600087806020019051810190610fed9190612620565b9650965096509650965096509650604051806101000160405280600115158152602001886005811115611022576110226123b4565b815260ff88166020808301919091526040808301899052606083018890526080830187905260a0830186905260c090920184905260008c815260fd8252919091208251815490151560ff19821681178355928401519192839161ff001990911661ffff199091161761010083600581111561109f5761109f6123b4565b02179055506040820151815460ff909116620100000262ff000019909116178155606082015160018201556080820151600282015560a0820151600382015560c0820151600482015560e09091015160059091015550505050505050505050565b6000818152606760205260408120546001600160a01b03166111795760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104af565b6000611184836108d5565b9050806001600160a01b0316846001600160a01b031614806111bf5750836001600160a01b03166111b4846104fd565b6001600160a01b0316145b806111ef57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661120a826108d5565b6001600160a01b0316146112725760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016104af565b6001600160a01b0382166112d45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104af565b6112df8383836118fe565b6112ea600082610d85565b6001600160a01b03831660009081526068602052604081208054600192906113139084906125c7565b90915550506001600160a01b0382166000908152606860205260408120805460019290611341908490612608565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156114565760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104af565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6114ce8484846111f7565b6114da848484846119b6565b6104f75760405162461bcd60e51b81526004016104af90612691565b606060fc80546103f79061245d565b6060816115295750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611553578061153d816126e3565b915061154c9050600a83612714565b915061152d565b60008167ffffffffffffffff81111561156e5761156e61206a565b6040519080825280601f01601f191660200182016040528015611598576020820181803683370190505b5090505b84156111ef576115ad6001836125c7565b91506115ba600a86612728565b6115c5906030612608565b60f81b8183815181106115da576115da612537565b60200101906001600160f81b031916908160001a9053506115fc600a86612714565b945061159c565b600054610100900460ff168061161c575060005460ff16155b6116385760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff1615801561165a576000805461ffff19166101011790555b611662611ac3565b61166a611ac3565b6116748383611b2d565b80156106a3576000805461ff0019169055505050565b600054610100900460ff16806116a3575060005460ff16155b6116bf5760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff161580156116e1576000805461ffff19166101011790555b6116e9611ac3565b6116f1611ac3565b6116f9611ac3565b8015610c44576000805461ff001916905550565b600054610100900460ff1680611726575060005460ff16155b6117425760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff16158015611764576000805461ffff19166101011790555b61176c611ac3565b6116f9611bc2565b8151600090839060011461178a5761178a61273c565b825b85518110156117ff57816000815181106117a8576117a8612537565b602001015160f81c60f81b6001600160f81b0319168682815181106117cf576117cf612537565b01602001516001600160f81b03191614156117ed579150610ba59050565b806117f7816126e3565b91505061178c565b5060001995945050505050565b600080805b83518110156118dd57600084828151811061182e5761182e612537565b016020015160f81c90506030811080159061184a575060398111155b156118765761185a6030826125c7565b61186584600a612752565b61186f9190612608565b92506118ca565b60405162461bcd60e51b815260206004820152602360248201527f696e76616c696420696e7075742c206f6e6c79206e756d6265727320616c6c6f6044820152621dd95960ea1b60648201526084016104af565b50806118d5816126e3565b915050611811565b5092915050565b610a9b828260405180602001604052806000815250611c22565b6001600160a01b0383166119595761195481609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61197c565b816001600160a01b0316836001600160a01b03161461197c5761197c8382611c55565b6001600160a01b038216611993576106a381611cf2565b826001600160a01b0316826001600160a01b0316146106a3576106a38282611da1565b60006001600160a01b0384163b15611ab857604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906119fa903390899088908890600401612771565b602060405180830381600087803b158015611a1457600080fd5b505af1925050508015611a44575060408051601f3d908101601f19168201909252611a41918101906127ae565b60015b611a9e573d808015611a72576040519150601f19603f3d011682016040523d82523d6000602084013e611a77565b606091505b508051611a965760405162461bcd60e51b81526004016104af90612691565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506111ef565b506001949350505050565b600054610100900460ff1680611adc575060005460ff16155b611af85760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff161580156116f9576000805461ffff19166101011790558015610c44576000805461ff001916905550565b600054610100900460ff1680611b46575060005460ff16155b611b625760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff16158015611b84576000805461ffff19166101011790555b8251611b97906065906020860190611f33565b508151611bab906066906020850190611f33565b5080156106a3576000805461ff0019169055505050565b600054610100900460ff1680611bdb575060005460ff16155b611bf75760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff16158015611c19576000805461ffff19166101011790555b6116f9336113a2565b611c2c8383611de5565b611c3960008484846119b6565b6106a35760405162461bcd60e51b81526004016104af90612691565b60006001611c628461094c565b611c6c91906125c7565b600083815260986020526040902054909150808214611cbf576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090611d04906001906125c7565b6000838152609a602052604081205460998054939450909284908110611d2c57611d2c612537565b906000526020600020015490508060998381548110611d4d57611d4d612537565b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480611d8557611d856127cb565b6001900381819060005260206000200160009055905550505050565b6000611dac8361094c565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6001600160a01b038216611e3b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104af565b6000818152606760205260409020546001600160a01b031615611ea05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104af565b611eac600083836118fe565b6001600160a01b0382166000908152606860205260408120805460019290611ed5908490612608565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611f3f9061245d565b90600052602060002090601f016020900481019282611f615760008555611fa7565b82601f10611f7a57805160ff1916838001178555611fa7565b82800160010185558215611fa7579182015b82811115611fa7578251825591602001919060010190611f8c565b50611fb3929150611fb7565b5090565b5b80821115611fb35760008155600101611fb8565b6001600160e01b031981168114610c4457600080fd5b600060208284031215611ff457600080fd5b8135610ba581611fcc565b60005b8381101561201a578181015183820152602001612002565b838111156104f75750506000910152565b60008151808452612043816020860160208601611fff565b601f01601f19169290920160200192915050565b602081526000610ba5602083018461202b565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561209b5761209b61206a565b604051601f8501601f19908116603f011681019082821181831017156120c3576120c361206a565b816040528093508581528686860111156120dc57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261210757600080fd5b610ba583833560208501612080565b80356001600160a01b038116811461212d57600080fd5b919050565b60008060006060848603121561214757600080fd5b833567ffffffffffffffff8082111561215f57600080fd5b61216b878388016120f6565b9450602086013591508082111561218157600080fd5b5061218e868287016120f6565b92505061219d60408501612116565b90509250925092565b6000602082840312156121b857600080fd5b5035919050565b600080604083850312156121d257600080fd5b6121db83612116565b946020939093013593505050565b600080600080606085870312156121ff57600080fd5b61220885612116565b935060208501359250604085013567ffffffffffffffff8082111561222c57600080fd5b818701915087601f83011261224057600080fd5b81358181111561224f57600080fd5b88602082850101111561226157600080fd5b95989497505060200194505050565b60008060006060848603121561228557600080fd5b61228e84612116565b925061229c60208501612116565b9150604084013590509250925092565b6000602082840312156122be57600080fd5b610ba582612116565b6000602082840312156122d957600080fd5b813567ffffffffffffffff8111156122f057600080fd5b6111ef848285016120f6565b6000806040838503121561230f57600080fd5b61231883612116565b91506020830135801515811461232d57600080fd5b809150509250929050565b6000806000806080858703121561234e57600080fd5b61235785612116565b935061236560208601612116565b925060408501359150606085013567ffffffffffffffff81111561238857600080fd5b8501601f8101871361239957600080fd5b6123a887823560208401612080565b91505092959194509250565b634e487b7160e01b600052602160045260246000fd5b88151581526101008101600689106123f257634e487b7160e01b600052602160045260246000fd5b602082019890985260ff9690961660408701526060860194909452608085019290925260a084015260c083015260e090910152919050565b6000806040838503121561243d57600080fd5b61244683612116565b915061245460208401612116565b90509250929050565b600181811c9082168061247157607f821691505b6020821081141561249257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008351612594818460208801611fff565b8351908301906125a8818360208801611fff565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156125d9576125d96125b1565b500390565b600080858511156125ee57600080fd5b838611156125fb57600080fd5b5050820193919092039150565b6000821982111561261b5761261b6125b1565b500190565b600080600080600080600060e0888a03121561263b57600080fd5b87516006811061264a57600080fd5b602089015190975060ff8116811461266157600080fd5b604089015160608a015160808b015160a08c015160c0909c01519a9d939c50919a90999198509650945092505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006000198214156126f7576126f76125b1565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082612723576127236126fe565b500490565b600082612737576127376126fe565b500690565b634e487b7160e01b600052600160045260246000fd5b600081600019048311821515161561276c5761276c6125b1565b500290565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906127a49083018461202b565b9695505050505050565b6000602082840312156127c057600080fd5b8151610ba581611fcc565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220818fbd31018ac8c62e8bd20af6e403aee2c526213f1ed4183127ffedcbfcb5ca64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063b88d4fde1161007c578063b88d4fde146102cb578063c87b56dd146102de578063e3684e39146102f1578063e985e9c51461035b578063f2fde38b14610397578063fb91a7d2146103aa57600080fd5b806370a0823114610271578063715018a6146102845780638da5cb5b1461028c57806395d89b411461029d578063a0bcfc7f146102a5578063a22cb465146102b857600080fd5b806319ee6e3f1161011557806319ee6e3f146101ff57806323b872dd146102125780632f745c591461022557806342842e0e146102385780634f6ccce71461024b5780636352211e1461025e57600080fd5b806301ffc9a71461015d57806306fdde0314610185578063077f224a1461019a578063081812fc146101af578063095ea7b3146101da57806318160ddd146101ed575b600080fd5b61017061016b366004611fe2565b6103bd565b60405190151581526020015b60405180910390f35b61018d6103e8565b60405161017c9190612057565b6101ad6101a8366004612132565b61047a565b005b6101c26101bd3660046121a6565b6104fd565b6040516001600160a01b03909116815260200161017c565b6101ad6101e83660046121bf565b610592565b6099545b60405190815260200161017c565b6101ad61020d3660046121e9565b6106a8565b6101ad610220366004612270565b610760565b6101f16102333660046121bf565b610791565b6101ad610246366004612270565b610827565b6101f16102593660046121a6565b610842565b6101c261026c3660046121a6565b6108d5565b6101f161027f3660046122ac565b61094c565b6101ad6109d3565b60c9546001600160a01b03166101c2565b61018d610a09565b6101ad6102b33660046122c7565b610a18565b6101ad6102c63660046122fc565b610a90565b6101ad6102d9366004612338565b610a9f565b61018d6102ec3660046121a6565b610ad1565b6103476102ff3660046121a6565b60fd6020526000908152604090208054600182015460028301546003840154600485015460059095015460ff8086169661010087048216966201000090049091169493929188565b60405161017c9897969594939291906123ca565b61017061036936600461242a565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6101ad6103a53660046122ac565b610bac565b60fb546101c2906001600160a01b031681565b60006001600160e01b0319821663780e9d6360e01b14806103e257506103e282610c47565b92915050565b6060606580546103f79061245d565b80601f01602080910402602001604051908101604052809291908181526020018280546104239061245d565b80156104705780601f1061044557610100808354040283529160200191610470565b820191906000526020600020905b81548152906001019060200180831161045357829003601f168201915b5050505050905090565b600054610100900460ff1680610493575060005460ff16155b6104b85760405162461bcd60e51b81526004016104af90612498565b60405180910390fd5b600054610100900460ff161580156104da576000805461ffff19166101011790555b6104e5848484610c97565b80156104f7576000805461ff00191690555b50505050565b6000818152606760205260408120546001600160a01b03166105765760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104af565b506000908152606960205260409020546001600160a01b031690565b600061059d826108d5565b9050806001600160a01b0316836001600160a01b0316141561060b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104af565b336001600160a01b038216148061062757506106278133610369565b6106995760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016104af565b6106a38383610d85565b505050565b826001146106eb5760405162461bcd60e51b815260206004820152601060248201526f416d6f756e74206d757374206265203160801b60448201526064016104af565b60fb546001600160a01b0316331461073c5760405162461bcd60e51b815260206004820152601460248201527331b0b63632b91034b9903737ba1036b4b73a32b960611b60448201526064016104af565b6000806107498484610df3565b91509150610758868383610fae565b505050505050565b61076a3382611100565b6107865760405162461bcd60e51b81526004016104af906124e6565b6106a38383836111f7565b600061079c8361094c565b82106107fe5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016104af565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b6106a383838360405180602001604052806000815250610a9f565b600061084d60995490565b82106108b05760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016104af565b609982815481106108c3576108c3612537565b90600052602060002001549050919050565b6000818152606760205260408120546001600160a01b0316806103e25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104af565b60006001600160a01b0382166109b75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104af565b506001600160a01b031660009081526068602052604090205490565b60c9546001600160a01b031633146109fd5760405162461bcd60e51b81526004016104af9061254d565b610a0760006113a2565b565b6060606680546103f79061245d565b60c9546001600160a01b03163314610a425760405162461bcd60e51b81526004016104af9061254d565b8051610a559060fc906020840190611f33565b507f24a9152dc695ecc801ad580886331ee12d7aac0fa2ae341a5ae3c2ccae36cb4f81604051610a859190612057565b60405180910390a150565b610a9b3383836113f4565b5050565b610aa93383611100565b610ac55760405162461bcd60e51b81526004016104af906124e6565b6104f7848484846114c3565b6000818152606760205260409020546060906001600160a01b0316610b505760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016104af565b6000610b5a6114f6565b90506000815111610b7a5760405180602001604052806000815250610ba5565b80610b8484611505565b604051602001610b95929190612582565b6040516020818303038152906040525b9392505050565b60c9546001600160a01b03163314610bd65760405162461bcd60e51b81526004016104af9061254d565b6001600160a01b038116610c3b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104af565b610c44816113a2565b50565b60006001600160e01b031982166380ac58cd60e01b1480610c7857506001600160e01b03198216635b5e139f60e01b145b806103e257506301ffc9a760e01b6001600160e01b03198316146103e2565b600054610100900460ff1680610cb0575060005460ff16155b610ccc5760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff16158015610cee576000805461ffff19166101011790555b610cf88484611603565b610d0061168a565b610d0861170d565b6001600160a01b038216610d535760405162461bcd60e51b81526020600482015260126024820152714d696e7465722063616e6e6f74207a65726f60701b60448201526064016104af565b60fb80546001600160a01b0319166001600160a01b03841617905580156104f7576000805461ff001916905550505050565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610dba826108d5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600060606000610e5185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040805180820190915260018152601d60f91b6020820152935091506117749050565b90506000811215610e9b5760405162461bcd60e51b815260206004820152601460248201527314d95c185c985d1bdc881b5d5cdd08195e1a5cdd60621b60448201526064016104af565b6000610ef586600187610eae82876125c7565b92610ebb939291906125de565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061180c92505050565b905060006003610f0584886125c7565b610f0f91906125c7565b905080610f3357816040518060200160405280600081525094509450505050610fa7565b3660008888610f43876002612608565b90610f4f60018c6125c7565b92610f5c939291906125de565b9150915083828281818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250959c50919a50505050505050505050505b9250929050565b610fb883836118e4565b600082815260fd602052604090205460ff166106a357600080600080600080600087806020019051810190610fed9190612620565b9650965096509650965096509650604051806101000160405280600115158152602001886005811115611022576110226123b4565b815260ff88166020808301919091526040808301899052606083018890526080830187905260a0830186905260c090920184905260008c815260fd8252919091208251815490151560ff19821681178355928401519192839161ff001990911661ffff199091161761010083600581111561109f5761109f6123b4565b02179055506040820151815460ff909116620100000262ff000019909116178155606082015160018201556080820151600282015560a0820151600382015560c0820151600482015560e09091015160059091015550505050505050505050565b6000818152606760205260408120546001600160a01b03166111795760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104af565b6000611184836108d5565b9050806001600160a01b0316846001600160a01b031614806111bf5750836001600160a01b03166111b4846104fd565b6001600160a01b0316145b806111ef57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661120a826108d5565b6001600160a01b0316146112725760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016104af565b6001600160a01b0382166112d45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104af565b6112df8383836118fe565b6112ea600082610d85565b6001600160a01b03831660009081526068602052604081208054600192906113139084906125c7565b90915550506001600160a01b0382166000908152606860205260408120805460019290611341908490612608565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156114565760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104af565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6114ce8484846111f7565b6114da848484846119b6565b6104f75760405162461bcd60e51b81526004016104af90612691565b606060fc80546103f79061245d565b6060816115295750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611553578061153d816126e3565b915061154c9050600a83612714565b915061152d565b60008167ffffffffffffffff81111561156e5761156e61206a565b6040519080825280601f01601f191660200182016040528015611598576020820181803683370190505b5090505b84156111ef576115ad6001836125c7565b91506115ba600a86612728565b6115c5906030612608565b60f81b8183815181106115da576115da612537565b60200101906001600160f81b031916908160001a9053506115fc600a86612714565b945061159c565b600054610100900460ff168061161c575060005460ff16155b6116385760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff1615801561165a576000805461ffff19166101011790555b611662611ac3565b61166a611ac3565b6116748383611b2d565b80156106a3576000805461ff0019169055505050565b600054610100900460ff16806116a3575060005460ff16155b6116bf5760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff161580156116e1576000805461ffff19166101011790555b6116e9611ac3565b6116f1611ac3565b6116f9611ac3565b8015610c44576000805461ff001916905550565b600054610100900460ff1680611726575060005460ff16155b6117425760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff16158015611764576000805461ffff19166101011790555b61176c611ac3565b6116f9611bc2565b8151600090839060011461178a5761178a61273c565b825b85518110156117ff57816000815181106117a8576117a8612537565b602001015160f81c60f81b6001600160f81b0319168682815181106117cf576117cf612537565b01602001516001600160f81b03191614156117ed579150610ba59050565b806117f7816126e3565b91505061178c565b5060001995945050505050565b600080805b83518110156118dd57600084828151811061182e5761182e612537565b016020015160f81c90506030811080159061184a575060398111155b156118765761185a6030826125c7565b61186584600a612752565b61186f9190612608565b92506118ca565b60405162461bcd60e51b815260206004820152602360248201527f696e76616c696420696e7075742c206f6e6c79206e756d6265727320616c6c6f6044820152621dd95960ea1b60648201526084016104af565b50806118d5816126e3565b915050611811565b5092915050565b610a9b828260405180602001604052806000815250611c22565b6001600160a01b0383166119595761195481609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61197c565b816001600160a01b0316836001600160a01b03161461197c5761197c8382611c55565b6001600160a01b038216611993576106a381611cf2565b826001600160a01b0316826001600160a01b0316146106a3576106a38282611da1565b60006001600160a01b0384163b15611ab857604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906119fa903390899088908890600401612771565b602060405180830381600087803b158015611a1457600080fd5b505af1925050508015611a44575060408051601f3d908101601f19168201909252611a41918101906127ae565b60015b611a9e573d808015611a72576040519150601f19603f3d011682016040523d82523d6000602084013e611a77565b606091505b508051611a965760405162461bcd60e51b81526004016104af90612691565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506111ef565b506001949350505050565b600054610100900460ff1680611adc575060005460ff16155b611af85760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff161580156116f9576000805461ffff19166101011790558015610c44576000805461ff001916905550565b600054610100900460ff1680611b46575060005460ff16155b611b625760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff16158015611b84576000805461ffff19166101011790555b8251611b97906065906020860190611f33565b508151611bab906066906020850190611f33565b5080156106a3576000805461ff0019169055505050565b600054610100900460ff1680611bdb575060005460ff16155b611bf75760405162461bcd60e51b81526004016104af90612498565b600054610100900460ff16158015611c19576000805461ffff19166101011790555b6116f9336113a2565b611c2c8383611de5565b611c3960008484846119b6565b6106a35760405162461bcd60e51b81526004016104af90612691565b60006001611c628461094c565b611c6c91906125c7565b600083815260986020526040902054909150808214611cbf576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090611d04906001906125c7565b6000838152609a602052604081205460998054939450909284908110611d2c57611d2c612537565b906000526020600020015490508060998381548110611d4d57611d4d612537565b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480611d8557611d856127cb565b6001900381819060005260206000200160009055905550505050565b6000611dac8361094c565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6001600160a01b038216611e3b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104af565b6000818152606760205260409020546001600160a01b031615611ea05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104af565b611eac600083836118fe565b6001600160a01b0382166000908152606860205260408120805460019290611ed5908490612608565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611f3f9061245d565b90600052602060002090601f016020900481019282611f615760008555611fa7565b82601f10611f7a57805160ff1916838001178555611fa7565b82800160010185558215611fa7579182015b82811115611fa7578251825591602001919060010190611f8c565b50611fb3929150611fb7565b5090565b5b80821115611fb35760008155600101611fb8565b6001600160e01b031981168114610c4457600080fd5b600060208284031215611ff457600080fd5b8135610ba581611fcc565b60005b8381101561201a578181015183820152602001612002565b838111156104f75750506000910152565b60008151808452612043816020860160208601611fff565b601f01601f19169290920160200192915050565b602081526000610ba5602083018461202b565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561209b5761209b61206a565b604051601f8501601f19908116603f011681019082821181831017156120c3576120c361206a565b816040528093508581528686860111156120dc57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261210757600080fd5b610ba583833560208501612080565b80356001600160a01b038116811461212d57600080fd5b919050565b60008060006060848603121561214757600080fd5b833567ffffffffffffffff8082111561215f57600080fd5b61216b878388016120f6565b9450602086013591508082111561218157600080fd5b5061218e868287016120f6565b92505061219d60408501612116565b90509250925092565b6000602082840312156121b857600080fd5b5035919050565b600080604083850312156121d257600080fd5b6121db83612116565b946020939093013593505050565b600080600080606085870312156121ff57600080fd5b61220885612116565b935060208501359250604085013567ffffffffffffffff8082111561222c57600080fd5b818701915087601f83011261224057600080fd5b81358181111561224f57600080fd5b88602082850101111561226157600080fd5b95989497505060200194505050565b60008060006060848603121561228557600080fd5b61228e84612116565b925061229c60208501612116565b9150604084013590509250925092565b6000602082840312156122be57600080fd5b610ba582612116565b6000602082840312156122d957600080fd5b813567ffffffffffffffff8111156122f057600080fd5b6111ef848285016120f6565b6000806040838503121561230f57600080fd5b61231883612116565b91506020830135801515811461232d57600080fd5b809150509250929050565b6000806000806080858703121561234e57600080fd5b61235785612116565b935061236560208601612116565b925060408501359150606085013567ffffffffffffffff81111561238857600080fd5b8501601f8101871361239957600080fd5b6123a887823560208401612080565b91505092959194509250565b634e487b7160e01b600052602160045260246000fd5b88151581526101008101600689106123f257634e487b7160e01b600052602160045260246000fd5b602082019890985260ff9690961660408701526060860194909452608085019290925260a084015260c083015260e090910152919050565b6000806040838503121561243d57600080fd5b61244683612116565b915061245460208401612116565b90509250929050565b600181811c9082168061247157607f821691505b6020821081141561249257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008351612594818460208801611fff565b8351908301906125a8818360208801611fff565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156125d9576125d96125b1565b500390565b600080858511156125ee57600080fd5b838611156125fb57600080fd5b5050820193919092039150565b6000821982111561261b5761261b6125b1565b500190565b600080600080600080600060e0888a03121561263b57600080fd5b87516006811061264a57600080fd5b602089015190975060ff8116811461266157600080fd5b604089015160608a015160808b015160a08c015160c0909c01519a9d939c50919a90999198509650945092505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006000198214156126f7576126f76125b1565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082612723576127236126fe565b500490565b600082612737576127376126fe565b500690565b634e487b7160e01b600052600160045260246000fd5b600081600019048311821515161561276c5761276c6125b1565b500290565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906127a49083018461202b565b9695505050505050565b6000602082840312156127c057600080fd5b8151610ba581611fcc565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220818fbd31018ac8c62e8bd20af6e403aee2c526213f1ed4183127ffedcbfcb5ca64736f6c63430008090033",
  "devdoc": {
    "author": "Dmitry Yakovlevich",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string,address)": {
        "params": {
          "_minter": "NFT Minter Address.",
          "name_": "NFT Name.",
          "symbol_": "NFT Symbol."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseUri(string)": {
        "details": "only owner can call this function.",
        "params": {
          "_baseUri_": "base URI."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PortraitLayer, this contract is inherited BaseIlluvitar contract, this contract contains the function of combination and NFT metadata.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BaseUriUpdated(string)": {
        "notice": "event emitted when base URI is set."
      }
    },
    "kind": "user",
    "methods": {
      "initialize(string,string,address)": {
        "notice": "Initialize Base Layer."
      },
      "setBaseUri(string)": {
        "notice": "Set base URI"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 756,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 759,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2503,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2752,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 825,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 827,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 831,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 835,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 839,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 845,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1656,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1830,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1834,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1837,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1841,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2156,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 635,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 749,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4430,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "imxMinter",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 4432,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "__baseUri",
        "offset": 0,
        "slot": "252",
        "type": "t_string_storage"
      },
      {
        "astId": 6016,
        "contract": "contracts/PortraitLayer.sol:PortraitLayer",
        "label": "metadata",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint256,t_struct(Metadata)6011_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(BoxType)4564": {
        "encoding": "inplace",
        "label": "enum BoxType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Metadata)6011_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PortraitLayer.Metadata)",
        "numberOfBytes": "32",
        "value": "t_struct(Metadata)6011_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Metadata)6011_storage": {
        "encoding": "inplace",
        "label": "struct PortraitLayer.Metadata",
        "members": [
          {
            "astId": 5995,
            "contract": "contracts/PortraitLayer.sol:PortraitLayer",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5998,
            "contract": "contracts/PortraitLayer.sol:PortraitLayer",
            "label": "boxType",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(BoxType)4564"
          },
          {
            "astId": 6000,
            "contract": "contracts/PortraitLayer.sol:PortraitLayer",
            "label": "tier",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6002,
            "contract": "contracts/PortraitLayer.sol:PortraitLayer",
            "label": "skinId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6004,
            "contract": "contracts/PortraitLayer.sol:PortraitLayer",
            "label": "bodyId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6006,
            "contract": "contracts/PortraitLayer.sol:PortraitLayer",
            "label": "eyeId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6008,
            "contract": "contracts/PortraitLayer.sol:PortraitLayer",
            "label": "headId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6010,
            "contract": "contracts/PortraitLayer.sol:PortraitLayer",
            "label": "propsId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
