{
  "address": "0x54ae9377856d3F9470A9ba0A3117dAE4eA0AAb02",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_vrfKeyhash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_vrfFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum BoxType",
                  "name": "boxType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Minter.PortraitMintParams[]",
              "name": "portraitMintParams",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum AccessoryType",
                  "name": "accessoryType",
                  "type": "uint8"
                },
                {
                  "internalType": "enum BoxType",
                  "name": "boxType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Minter.AccessorySemiRandomMintParams[]",
              "name": "accessorySemiRandomMintParams",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum BoxType",
                  "name": "boxType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Minter.AccessoryFullRandomMintParams[]",
              "name": "accessoryFullRandomMintParams",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "randomNumber",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Minter.MintRequest",
          "name": "mintRequest",
          "type": "tuple"
        }
      ],
      "name": "MintRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracleRegistry",
          "type": "address"
        }
      ],
      "name": "OracleRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasurySet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TIER_CHANCE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIER_COUNT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BoxType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "accessoryMintInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "randomPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "semiRandomPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "fulfillMintRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "getMintResult",
      "outputs": [
        {
          "internalType": "address",
          "name": "requestor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "enum BoxType",
              "name": "boxType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "tier",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "rand",
              "type": "uint256"
            }
          ],
          "internalType": "struct Minter.PortraitInfo[]",
          "name": "portraits",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum BoxType",
              "name": "boxType",
              "type": "uint8"
            },
            {
              "internalType": "enum AccessoryType",
              "name": "accessoryType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "tier",
              "type": "uint8"
            }
          ],
          "internalType": "struct Minter.AccessoryInfo[]",
          "name": "accessories",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "mintRequests",
      "outputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BoxType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "portraitMintInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum BoxType",
              "name": "boxType",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "amount",
              "type": "uint64"
            }
          ],
          "internalType": "struct Minter.PortraitMintParams[]",
          "name": "portraitMintParams",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum AccessoryType",
              "name": "accessoryType",
              "type": "uint8"
            },
            {
              "internalType": "enum BoxType",
              "name": "boxType",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "amount",
              "type": "uint64"
            }
          ],
          "internalType": "struct Minter.AccessorySemiRandomMintParams[]",
          "name": "accessorySemiRandomMintParams",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum BoxType",
              "name": "boxType",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "amount",
              "type": "uint64"
            }
          ],
          "internalType": "struct Minter.AccessoryFullRandomMintParams[]",
          "name": "accessoryFullRandomMintParams",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracleRegistry_",
          "type": "address"
        }
      ],
      "name": "setOracleRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x62f65034e3ca91ccbef646bc81e7e52ca6f4766bdda23d2d04c0f5d3fb95bb7f",
  "receipt": {
    "to": null,
    "from": "0xA4e47B38415201d4c8aB42711892A31C7B06bdE9",
    "contractAddress": "0x54ae9377856d3F9470A9ba0A3117dAE4eA0AAb02",
    "transactionIndex": 0,
    "gasUsed": "3138064",
    "logsBloom": "0x
    "blockHash": "0x692e28cbb938388b7f2c43da9ab4b9e369acd0d9ccc0c976c84579fb337cc10c",
    "transactionHash": "0x62f65034e3ca91ccbef646bc81e7e52ca6f4766bdda23d2d04c0f5d3fb95bb7f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12236295,
        "transactionHash": "0x62f65034e3ca91ccbef646bc81e7e52ca6f4766bdda23d2d04c0f5d3fb95bb7f",
        "address": "0x54ae9377856d3F9470A9ba0A3117dAE4eA0AAb02",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a4e47b38415201d4c8ab42711892a31c7b06bde9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x692e28cbb938388b7f2c43da9ab4b9e369acd0d9ccc0c976c84579fb337cc10c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12236295,
        "transactionHash": "0x62f65034e3ca91ccbef646bc81e7e52ca6f4766bdda23d2d04c0f5d3fb95bb7f",
        "address": "0x54ae9377856d3F9470A9ba0A3117dAE4eA0AAb02",
        "topics": [
          "0x3c864541ef71378c6229510ed90f376565ee42d9c5e0904a984a9e863e6db44f",
          "0x000000000000000000000000a4e47b38415201d4c8ab42711892a31c7b06bde9"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x692e28cbb938388b7f2c43da9ab4b9e369acd0d9ccc0c976c84579fb337cc10c"
      }
    ],
    "blockNumber": 12236295,
    "cumulativeGasUsed": "3138064",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf8046Eb28d62D12AB1b55e8e6A9742C1b1F51164",
    "0xb953b44b4e776313B1236D92C09D9ce39135EdbE",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0",
    "0xA4e47B38415201d4c8aB42711892A31C7B06bdE9",
    "0xc778417E063141139Fce010982780140Aa0cD5Ab",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "9bdc976d344bc2eb84329ce4b7643821",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_vrfKeyhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_vrfFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Minter.PortraitMintParams[]\",\"name\":\"portraitMintParams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum AccessoryType\",\"name\":\"accessoryType\",\"type\":\"uint8\"},{\"internalType\":\"enum BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Minter.AccessorySemiRandomMintParams[]\",\"name\":\"accessorySemiRandomMintParams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Minter.AccessoryFullRandomMintParams[]\",\"name\":\"accessoryFullRandomMintParams\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Minter.MintRequest\",\"name\":\"mintRequest\",\"type\":\"tuple\"}],\"name\":\"MintRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleRegistry\",\"type\":\"address\"}],\"name\":\"OracleRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TIER_CHANCE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIER_COUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BoxType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"accessoryMintInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"randomPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"semiRandomPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"fulfillMintRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"getMintResult\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rand\",\"type\":\"uint256\"}],\"internalType\":\"struct Minter.PortraitInfo[]\",\"name\":\"portraits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"internalType\":\"enum AccessoryType\",\"name\":\"accessoryType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"internalType\":\"struct Minter.AccessoryInfo[]\",\"name\":\"accessories\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"mintRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BoxType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"portraitMintInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Minter.PortraitMintParams[]\",\"name\":\"portraitMintParams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum AccessoryType\",\"name\":\"accessoryType\",\"type\":\"uint8\"},{\"internalType\":\"enum BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Minter.AccessorySemiRandomMintParams[]\",\"name\":\"accessorySemiRandomMintParams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Minter.AccessoryFullRandomMintParams[]\",\"name\":\"accessoryFullRandomMintParams\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleRegistry_\",\"type\":\"address\"}],\"name\":\"setOracleRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Dmitry Yakovlevich\",\"events\":{\"MintRequested(address,bytes32,(address,(uint8,uint64)[],(uint8,uint8,uint64)[],(uint8,uint64)[],uint256))\":{\"details\":\"emitted in {purchase} or {requestRandomAgain} function.\",\"params\":{\"requestId\":\"requestId number.\",\"requester\":\"requester address.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_linkToken\":\"LINK token address.\",\"_oracleRegistry\":\"IlluviumOracleRegistry Address.\",\"_treasury\":\"Treasury Address.\",\"_vrfCoordinator\":\"Chainlink VRF Coordinator address.\",\"_vrfFee\":\"Fee.\",\"_vrfKeyhash\":\"Key Hash.\",\"_weth\":\"WETH Address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"purchase((uint8,uint64)[],(uint8,uint8,uint64)[],(uint8,uint64)[],address)\":{\"params\":{\"accessoryFullRandomMintParams\":\"accessory layer full random mint params.\",\"accessorySemiRandomMintParams\":\"accessory layer semi random mint params.\",\"paymentToken\":\"payment token address.\",\"portraitMintParams\":\"portrait layer mint params.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOracleRegistry(address)\":{\"details\":\"only owner can call this function.\",\"params\":{\"oracleRegistry_\":\"OracleRegistry Address.\"}},\"setTreasury(address)\":{\"details\":\"only owner can call this function.\",\"params\":{\"treasury_\":\"Treasury Address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Minter, this contract is inherited from chainlink VRFConsumerBase, this contract contains purchase function which users interact to mint several base or accessory illuvitars.\",\"version\":1},\"userdoc\":{\"events\":{\"MintRequested(address,bytes32,(address,(uint8,uint64)[],(uint8,uint8,uint64)[],(uint8,uint64)[],uint256))\":{\"notice\":\"event emitted random accessory requested.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor.\"},\"purchase((uint8,uint64)[],(uint8,uint8,uint64)[],(uint8,uint64)[],address)\":{\"notice\":\"Mint for Portrait and Accesory items. Users will send ETH or sILV to mint itmes\"},\"setOracleRegistry(address)\":{\"notice\":\"setFunction for OracleRegistry Address.\"},\"setTreasury(address)\":{\"notice\":\"setFunction for Treasury Address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Minter.sol\":\"Minter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x778c9d88cd6d94ae866c1c3f5fec6022f07e39280d3b6d581c8cceb8a5ac4b1e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nenum AccessoryType {\\r\\n    Skin,\\r\\n    Body,\\r\\n    EyeWear,\\r\\n    HeadWear,\\r\\n    Props\\r\\n}\\r\\n\\r\\nenum BoxType {\\r\\n    Virtual,\\r\\n    Bronze,\\r\\n    Silver,\\r\\n    Gold,\\r\\n    Platinum,\\r\\n    Diamond\\r\\n}\\r\\n\",\"keccak256\":\"0x8d3e2db2764d02482335033be2f19e962b827985980fd83e73164bc424d60b4a\",\"license\":\"MIT\"},\"contracts/Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"./DataTypes.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IOracleRegistry.sol\\\";\\n\\n/**\\n    @title Minter, this contract is inherited from chainlink VRFConsumerBase,\\n    this contract contains purchase function which users interact to mint several base or accessory illuvitars.\\n    @author Dmitry Yakovlevich\\n */\\n\\ncontract Minter is VRFConsumerBase, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event TreasurySet(address indexed treasury);\\n    event OracleRegistrySet(address indexed oracleRegistry);\\n    event RequestFulfilled(bytes32 indexed requestId, uint256 randomNumber);\\n\\n    /**\\n     * @notice event emitted random accessory requested.\\n     * @dev emitted in {purchase} or {requestRandomAgain} function.\\n     * @param requester requester address.\\n     * @param requestId requestId number.\\n     */\\n    event MintRequested(address indexed requester, bytes32 requestId, MintRequest mintRequest);\\n\\n    //Purchase Body struct\\n    struct PortraitMintParams {\\n        BoxType boxType;\\n        uint64 amount;\\n    }\\n\\n    //Purchase Accessory struct\\n    struct AccessorySemiRandomMintParams {\\n        AccessoryType accessoryType;\\n        BoxType boxType;\\n        uint64 amount;\\n    }\\n\\n    struct AccessoryFullRandomMintParams {\\n        BoxType boxType;\\n        uint64 amount;\\n    }\\n\\n    //Purchase RandomAccessory struct\\n    struct MintRequest {\\n        address requester;\\n        PortraitMintParams[] portraitMintParams;\\n        AccessorySemiRandomMintParams[] accessorySemiRandomMintParams;\\n        AccessoryFullRandomMintParams[] accessoryFullRandomMintParams;\\n        uint256 randomNumber;\\n    }\\n\\n    struct PortraitInfo {\\n        BoxType boxType;\\n        uint8 tier;\\n        uint256 rand;\\n    }\\n\\n    struct AccessoryInfo {\\n        BoxType boxType;\\n        AccessoryType accessoryType;\\n        uint8 tier;\\n    }\\n\\n    struct PortraitMintInfo {\\n        uint256 price;\\n        uint16[6] tierChances;\\n    }\\n\\n    struct AccessoryMintInfo {\\n        uint256 randomPrice;\\n        uint256 semiRandomPrice;\\n        uint16[6] tierChances;\\n    }\\n\\n    address private constant ETHER_ADDRESS = address(0x0000000000000000000000000000000000000000);\\n    uint16 public constant MAX_TIER_CHANCE = 10000;\\n    uint8 public constant TIER_COUNT = 6;\\n\\n    mapping(BoxType => PortraitMintInfo) public portraitMintInfo;\\n    mapping(BoxType => AccessoryMintInfo) public accessoryMintInfo;\\n\\n    mapping(bytes32 => MintRequest) public mintRequests;\\n\\n    address public treasury;\\n    address public weth;\\n    address public oracleRegistry;\\n    bytes32 public vrfKeyHash;\\n    uint256 public vrfFee;\\n\\n    /**\\n     * @notice Constructor.\\n     * @param _vrfCoordinator Chainlink VRF Coordinator address.\\n     * @param _linkToken LINK token address.\\n     * @param _vrfKeyhash Key Hash.\\n     * @param _vrfFee Fee.\\n     * @param _treasury Treasury Address.\\n     * @param _weth WETH Address.\\n     * @param _oracleRegistry IlluviumOracleRegistry Address.\\n     */\\n    constructor(\\n        address _vrfCoordinator,\\n        address _linkToken,\\n        bytes32 _vrfKeyhash,\\n        uint256 _vrfFee,\\n        address _treasury,\\n        address _weth,\\n        address _oracleRegistry\\n    ) VRFConsumerBase(_vrfCoordinator, _linkToken) {\\n        require(_treasury != address(0), \\\"cannot zero address\\\");\\n\\n        vrfKeyHash = _vrfKeyhash;\\n        vrfFee = _vrfFee;\\n\\n        emit TreasurySet(_treasury);\\n        treasury = _treasury;\\n        weth = _weth;\\n        oracleRegistry = _oracleRegistry;\\n\\n        _initializePortraitMintInfo();\\n        _initializeAccessoryMintInfo();\\n    }\\n\\n    /**\\n     * @notice setFunction for Treasury Address.\\n     * @dev only owner can call this function.\\n     * @param treasury_ Treasury Address.\\n     */\\n    function setTreasury(address treasury_) external onlyOwner {\\n        require(treasury_ != address(0), \\\"Treasury address cannot zero\\\");\\n        treasury = treasury_;\\n\\n        emit TreasurySet(treasury_);\\n    }\\n\\n    /**\\n     * @notice setFunction for OracleRegistry Address.\\n     * @dev only owner can call this function.\\n     * @param oracleRegistry_ OracleRegistry Address.\\n     */\\n    function setOracleRegistry(address oracleRegistry_) external onlyOwner {\\n        oracleRegistry = oracleRegistry_;\\n\\n        emit OracleRegistrySet(oracleRegistry_);\\n    }\\n\\n    /**\\n     * @notice Mint for random accessory, callback for VRFConsumerBase\\n     * @dev inaccessible from outside\\n     * @param requestId requested random accesory Id.\\n     * @param randomNumber Random Number.\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomNumber) internal override {\\n        require(mintRequests[requestId].requester != address(0), \\\"No request exist\\\");\\n        require(mintRequests[requestId].randomNumber == 0, \\\"Random number already fulfilled\\\");\\n\\n        mintRequests[requestId].randomNumber = randomNumber;\\n\\n        emit RequestFulfilled(requestId, randomNumber);\\n    }\\n\\n    /**\\n     * @notice Mint for Portrait and Accesory items. Users will send ETH or sILV to mint itmes\\n     * @param portraitMintParams portrait layer mint params.\\n     * @param accessorySemiRandomMintParams accessory layer semi random mint params.\\n     * @param accessoryFullRandomMintParams accessory layer full random mint params.\\n     * @param paymentToken payment token address.\\n     */\\n    function purchase(\\n        PortraitMintParams[] calldata portraitMintParams,\\n        AccessorySemiRandomMintParams[] calldata accessorySemiRandomMintParams,\\n        AccessoryFullRandomMintParams[] calldata accessoryFullRandomMintParams,\\n        address paymentToken\\n    ) external payable {\\n        uint256 etherPrice;\\n\\n        bytes32 requestId = requestRandomness(vrfKeyHash, vrfFee);\\n\\n        MintRequest storage mintRequest = mintRequests[requestId];\\n        require(mintRequest.requester == address(0), \\\"Already requested\\\");\\n        mintRequest.requester = _msgSender();\\n\\n        uint256 length = portraitMintParams.length;\\n        for (uint256 i = 0; i < length; i += 1) {\\n            PortraitMintParams memory param = portraitMintParams[i];\\n            require(param.amount > 0, \\\"Invalid amount\\\");\\n            etherPrice += uint256(param.amount) * portraitMintInfo[param.boxType].price;\\n            mintRequest.portraitMintParams.push(param);\\n        }\\n\\n        length = accessorySemiRandomMintParams.length;\\n        for (uint256 i = 0; i < length; i += 1) {\\n            AccessorySemiRandomMintParams memory param = accessorySemiRandomMintParams[i];\\n            require(param.amount > 0, \\\"Invalid amount\\\");\\n            etherPrice += uint256(param.amount) * accessoryMintInfo[param.boxType].semiRandomPrice;\\n            mintRequest.accessorySemiRandomMintParams.push(param);\\n        }\\n\\n        length = accessoryFullRandomMintParams.length;\\n        for (uint256 i = 0; i < length; i += 1) {\\n            AccessoryFullRandomMintParams memory param = accessoryFullRandomMintParams[i];\\n            etherPrice += uint256(param.amount) * accessoryMintInfo[param.boxType].randomPrice;\\n            mintRequest.accessoryFullRandomMintParams.push(param);\\n        }\\n\\n        if (paymentToken == ETHER_ADDRESS) {\\n            require(msg.value == etherPrice, \\\"Invalid price\\\");\\n            payable(treasury).transfer(etherPrice);\\n        } else {\\n            IOracle oracle = IOracle(IOracleRegistry(oracleRegistry).getOracle(weth, paymentToken));\\n            oracle.update();\\n            uint256 tokenAmount = oracle.consult(weth, etherPrice);\\n            require(tokenAmount > 0, \\\"Invalid price\\\");\\n            IERC20(paymentToken).safeTransferFrom(_msgSender(), treasury, tokenAmount);\\n        }\\n\\n        emit MintRequested(_msgSender(), requestId, mintRequests[requestId]);\\n    }\\n\\n    function getMintResult(bytes32 requestId)\\n        external\\n        view\\n        returns (\\n            address requestor,\\n            uint256 seed,\\n            PortraitInfo[] memory portraits,\\n            AccessoryInfo[] memory accessories\\n        )\\n    {\\n        require(mintRequests[requestId].randomNumber != 0, \\\"No random number generated\\\");\\n        MintRequest memory mintRequest = mintRequests[requestId];\\n        requestor = mintRequest.requester;\\n        seed = mintRequest.randomNumber;\\n\\n        uint256 rand = seed;\\n        if (mintRequest.portraitMintParams.length > 0) {\\n            (portraits, rand) = _getPortraitsInfo(rand, mintRequest.portraitMintParams);\\n        }\\n\\n        if (\\n            mintRequest.accessoryFullRandomMintParams.length > 0 || mintRequest.accessorySemiRandomMintParams.length > 0\\n        ) {\\n            accessories = _getAccessoriesInfo(\\n                rand,\\n                mintRequest.accessoryFullRandomMintParams,\\n                mintRequest.accessorySemiRandomMintParams\\n            );\\n        }\\n    }\\n\\n    function _getPortraitsInfo(uint256 seed, PortraitMintParams[] memory portraitMintParams)\\n        internal\\n        view\\n        returns (PortraitInfo[] memory portraits, uint256 lastRand)\\n    {\\n        uint256 portraitAmount;\\n\\n        uint256 length = portraitMintParams.length;\\n        for (uint256 i = 0; i < length; i += 1) {\\n            portraitAmount += portraitMintParams[i].amount;\\n        }\\n\\n        uint256 rand = seed;\\n        if (portraitAmount > 0) {\\n            portraits = new PortraitInfo[](portraitAmount);\\n\\n            for (uint256 i = 0; i < length; i += 1) {\\n                uint256 amount = portraitMintParams[i].amount;\\n                for (uint256 j = 0; j < amount; j += 1) {\\n                    rand = uint256(keccak256(abi.encode(rand, rand)));\\n                    uint16 chance = uint16(rand % MAX_TIER_CHANCE);\\n                    uint16[6] memory tierChances = portraitMintInfo[portraitMintParams[i].boxType].tierChances;\\n                    for (uint8 k = 0; k < TIER_COUNT; k += 1) {\\n                        if (tierChances[k] > chance) {\\n                            portraits[i] = PortraitInfo({\\n                                boxType: portraitMintParams[i].boxType,\\n                                tier: k,\\n                                rand: rand / MAX_TIER_CHANCE\\n                            });\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        lastRand = rand;\\n    }\\n\\n    function _getAccessoriesInfo(\\n        uint256 seed,\\n        AccessoryFullRandomMintParams[] memory fullRandomMintParams,\\n        AccessorySemiRandomMintParams[] memory semiRandomMintParams\\n    ) internal view returns (AccessoryInfo[] memory accessories) {\\n        uint256 fullRandomAmount;\\n        uint256 semiRandomAmount;\\n        uint256 length = fullRandomMintParams.length;\\n        for (uint256 i = 0; i < length; i += 1) {\\n            fullRandomAmount += fullRandomMintParams[i].amount;\\n        }\\n\\n        length = semiRandomMintParams.length;\\n        for (uint256 i = 0; i < length; i += 1) {\\n            semiRandomAmount += semiRandomMintParams[i].amount;\\n        }\\n\\n        uint256 rand = seed;\\n        if (semiRandomAmount > 0 || fullRandomAmount > 0) {\\n            accessories = new AccessoryInfo[](semiRandomAmount + fullRandomAmount);\\n\\n            for (uint256 i = 0; i < length; i += 1) {\\n                uint256 amount = semiRandomMintParams[i].amount;\\n                for (uint256 j = 0; j < amount; j += 1) {\\n                    rand = uint256(keccak256(abi.encode(rand, rand)));\\n                    uint16 chance = uint16(rand % MAX_TIER_CHANCE);\\n                    uint16[6] memory tierChances = accessoryMintInfo[semiRandomMintParams[i].boxType].tierChances;\\n                    for (uint8 k = 0; k < TIER_COUNT; k += 1) {\\n                        if (tierChances[k] > chance) {\\n                            accessories[i] = AccessoryInfo({\\n                                boxType: semiRandomMintParams[i].boxType,\\n                                accessoryType: semiRandomMintParams[i].accessoryType,\\n                                tier: k\\n                            });\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n\\n            length = fullRandomMintParams.length;\\n            for (uint256 i = 0; i < length; i += 1) {\\n                uint256 amount = fullRandomMintParams[i].amount;\\n                for (uint256 j = 0; j < amount; j += 1) {\\n                    rand = uint256(keccak256(abi.encode(rand, rand)));\\n                    uint16 chance = uint16(rand % MAX_TIER_CHANCE);\\n                    AccessoryType accessoryType = AccessoryType(uint8((rand / MAX_TIER_CHANCE) % 5));\\n                    uint16[6] memory tierChances = accessoryMintInfo[fullRandomMintParams[i].boxType].tierChances;\\n                    for (uint8 k = 0; k < TIER_COUNT; k += 1) {\\n                        if (tierChances[k] > chance) {\\n                            accessories[i + semiRandomAmount] = AccessoryInfo({\\n                                boxType: fullRandomMintParams[i].boxType,\\n                                accessoryType: accessoryType,\\n                                tier: k\\n                            });\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function fulfillMintRequest(bytes32 requestId) external onlyOwner {\\n        require(mintRequests[requestId].requester != address(0), \\\"Request does not exist!\\\");\\n        require(mintRequests[requestId].randomNumber != 0, \\\"Random number not generated\\\");\\n        delete mintRequests[requestId];\\n    }\\n\\n    function _initializePortraitMintInfo() internal {\\n        portraitMintInfo[BoxType.Virtual] = PortraitMintInfo({ price: 0, tierChances: [10000, 0, 0, 0, 0, 0] });\\n        portraitMintInfo[BoxType.Bronze] = PortraitMintInfo({\\n            price: 5e16,\\n            tierChances: [0, 8000, 9700, 9930, 9980, 10000]\\n        });\\n        portraitMintInfo[BoxType.Silver] = PortraitMintInfo({\\n            price: 10e16,\\n            tierChances: [0, 6100, 8800, 9700, 9950, 10000]\\n        });\\n        portraitMintInfo[BoxType.Gold] = PortraitMintInfo({\\n            price: 25e16,\\n            tierChances: [0, 2400, 6600, 8800, 9700, 10000]\\n        });\\n        portraitMintInfo[BoxType.Platinum] = PortraitMintInfo({\\n            price: 75e16,\\n            tierChances: [0, 500, 2000, 4250, 8250, 10000]\\n        });\\n        portraitMintInfo[BoxType.Diamond] = PortraitMintInfo({\\n            price: 250e16,\\n            tierChances: [0, 200, 1000, 2500, 5000, 10000]\\n        });\\n    }\\n\\n    function _initializeAccessoryMintInfo() internal {\\n        accessoryMintInfo[BoxType.Virtual] = AccessoryMintInfo({\\n            randomPrice: 0,\\n            semiRandomPrice: 0,\\n            tierChances: [10000, 0, 0, 0, 0, 0]\\n        });\\n        accessoryMintInfo[BoxType.Bronze] = AccessoryMintInfo({\\n            randomPrice: 5e16,\\n            semiRandomPrice: 10e16,\\n            tierChances: [0, 8100, 9200, 9700, 9900, 10000]\\n        });\\n        accessoryMintInfo[BoxType.Silver] = AccessoryMintInfo({\\n            randomPrice: 10e16,\\n            semiRandomPrice: 20e16,\\n            tierChances: [0, 3000, 7600, 8800, 9700, 10000]\\n        });\\n        accessoryMintInfo[BoxType.Gold] = AccessoryMintInfo({\\n            randomPrice: 15e16,\\n            semiRandomPrice: 30e16,\\n            tierChances: [0, 1500, 4700, 7200, 9000, 10000]\\n        });\\n        accessoryMintInfo[BoxType.Platinum] = AccessoryMintInfo({\\n            randomPrice: 20e16,\\n            semiRandomPrice: 40e16,\\n            tierChances: [0, 500, 2000, 5300, 8000, 10000]\\n        });\\n        accessoryMintInfo[BoxType.Diamond] = AccessoryMintInfo({\\n            randomPrice: 25e16,\\n            semiRandomPrice: 50e16,\\n            tierChances: [0, 100, 600, 2800, 6000, 10000]\\n        });\\n    }\\n}\\n\",\"keccak256\":\"0x04e40b154671be16fb226fa645cbaf6db0484c59b0471f0a50d726012064ec8b\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Updates the oracle with the price values if required, for example\\n     *      the cumulative price at the start and end of a period, etc.\\n     *\\n     * @dev This function is part of the oracle maintenance flow\\n     */\\n    function update() external;\\n\\n    /**\\n     * @notice For a pair of tokens A/B (sell/buy), consults on the amount of token B to be\\n     *      bought if the specified amount of token A to be sold\\n     *\\n     * @dev This function is part of the oracle usage flow\\n     *\\n     * @param token token A (token to sell) address\\n     * @param amountIn amount of token A to sell\\n     * @return amountOut amount of token B to be bought\\n     */\\n    function consult(address token, uint256 amountIn) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbca3ff602bcc906141a28712d26956f64bf4d698326da14441d4e06bf9268936\",\"license\":\"MIT\"},\"contracts/interfaces/IOracleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * @title Oracle Registry interface\\n *\\n * @notice To make pair oracles more convenient to use, a more generic Oracle Registry\\n *        interface is introduced: it stores the addresses of pair price oracles and allows\\n *        searching/querying for them\\n */\\n\\ninterface IOracleRegistry {\\n    /**\\n     * @notice Searches for the Pair Price Oracle for A/B (sell/buy) token pair\\n     *\\n     * @param tokenA token A (token to sell) address\\n     * @param tokenB token B (token to buy) address\\n     * @return pairOracle pair price oracle address for A/B token pair\\n     */\\n    function getOracle(address tokenA, address tokenB) external view returns (address pairOracle);\\n}\\n\",\"keccak256\":\"0x00b042fd9bbe73e33b04ca698b7884085f3847d60415b5ba687e4a13f339563e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c8063715018a6116100a0578063ade0d70011610064578063ade0d70014610364578063b073da9614610391578063f0f44260146103a4578063f2fde38b146103c4578063f5bfe9b1146103e457600080fd5b8063715018a6146102a85780638165354e146102bd5780638da5cb5b146102dd5780638fd7adb5146102fb57806394985ddd1461034457600080fd5b80632a854867116100e75780632a854867146101d957806336331c8f146102095780633fc8cef3146102305780634bb93ab11461026857806361d027b31461028857600080fd5b8063041d443e146101195780630d39e46d146101425780631017507d146101a15780631bd8b51a146101b7575b600080fd5b34801561012557600080fd5b5061012f60085481565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061018261015d366004612136565b600460208190526000918252604090912080549101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610139565b3480156101ad57600080fd5b5061012f60095481565b3480156101c357600080fd5b506101d76101d2366004612136565b61040d565b005b3480156101e557600080fd5b506101f96101f4366004612136565b610556565b60405161013994939291906121ed565b34801561021557600080fd5b5061021e600681565b60405160ff9091168152602001610139565b34801561023c57600080fd5b50600654610250906001600160a01b031681565b6040516001600160a01b039091168152602001610139565b34801561027457600080fd5b50600754610250906001600160a01b031681565b34801561029457600080fd5b50600554610250906001600160a01b031681565b3480156102b457600080fd5b506101d7610864565b3480156102c957600080fd5b506101d76102d83660046122a1565b61089a565b3480156102e957600080fd5b506001546001600160a01b0316610250565b34801561030757600080fd5b5061032f6103163660046122cd565b6003602052600090815260409020805460019091015482565b60408051928352602083019190915201610139565b34801561035057600080fd5b506101d761035f3660046122e8565b61090e565b34801561037057600080fd5b5061012f61037f3660046122cd565b60026020526000908152604090205481565b6101d761039f366004612355565b610994565b3480156103b057600080fd5b506101d76103bf3660046122a1565b6110c9565b3480156103d057600080fd5b506101d76103df3660046122a1565b611193565b3480156103f057600080fd5b506103fa61271081565b60405161ffff9091168152602001610139565b6001546001600160a01b031633146104405760405162461bcd60e51b815260040161043790612430565b60405180910390fd5b6000818152600460205260409020546001600160a01b03166104a45760405162461bcd60e51b815260206004820152601760248201527f5265717565737420646f6573206e6f74206578697374210000000000000000006044820152606401610437565b600081815260046020819052604090912001546105035760405162461bcd60e51b815260206004820152601b60248201527f52616e646f6d206e756d626572206e6f742067656e65726174656400000000006044820152606401610437565b600081815260046020526040812080546001600160a01b03191681559061052d60018301826120b3565b61053b6002830160006120d1565b6105496003830160006120b3565b6004820160009055505050565b600081815260046020819052604082200154819060609081906105bb5760405162461bcd60e51b815260206004820152601a60248201527f4e6f2072616e646f6d206e756d6265722067656e6572617465640000000000006044820152606401610437565b6000858152600460209081526040808320815160a08101835281546001600160a01b031681526001820180548451818702810187019095528085529194929385840193909290879084015b8282101561067557600084815260209020604080518082019091529083018054829060ff16600581111561063c5761063c61214f565b600581111561064d5761064d61214f565b8152905461010090046001600160401b03166020918201529082526001929092019101610606565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156107475760008481526020902060408051606081019091529083018054829060ff1660048111156106d9576106d961214f565b60048111156106ea576106ea61214f565b81528154602090910190610100900460ff16600581111561070d5761070d61214f565b600581111561071e5761071e61214f565b815290546001600160401b036201000090910416602091820152908252600190920191016106a2565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156107e357600084815260209020604080518082019091529083018054829060ff1660058111156107aa576107aa61214f565b60058111156107bb576107bb61214f565b8152905461010090046001600160401b03166020918201529082526001929092019101610774565b50505090825250600491909101546020918201528151608083015191830151519097509095509091508490156108275761082181836020015161122e565b90945090505b6000826060015151118061084057506000826040015151115b1561085b576108588183606001518460400151611527565b92505b50509193509193565b6001546001600160a01b0316331461088e5760405162461bcd60e51b815260040161043790612430565b6108986000611b1c565b565b6001546001600160a01b031633146108c45760405162461bcd60e51b815260040161043790612430565b600780546001600160a01b0319166001600160a01b0383169081179091556040517f82540ac6cd91a834e79e860e8cdd0293470f3b23ee2a567f78d27eeeec83d23690600090a250565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109865760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006044820152606401610437565b6109908282611b6e565b5050565b6000806109a5600854600954611c79565b60008181526004602052604090208054919250906001600160a01b031615610a035760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e481c995c5d595cdd1959607a1b6044820152606401610437565b80546001600160a01b031916331781558860005b81811015610b755760008c8c83818110610a3357610a33612465565b905060400201803603810190610a499190612513565b9050600081602001516001600160401b031611610a995760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610437565b6002600082600001516005811115610ab357610ab361214f565b6005811115610ac457610ac461214f565b81526020019081526020016000206000015481602001516001600160401b0316610aee9190612545565b610af89087612564565b6001808601805480830182556000918252602090912084519101805493995084939092839160ff191690836005811115610b3457610b3461214f565b02179055506020919091015181546001600160401b039091166101000268ffffffffffffffff001990911617905550610b6e600182612564565b9050610a17565b5087905060005b81811015610d055760008a8a83818110610b9857610b98612465565b905060600201803603810190610bae919061257c565b9050600081604001516001600160401b031611610bfe5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610437565b6003600082602001516005811115610c1857610c1861214f565b6005811115610c2957610c2961214f565b81526020019081526020016000206001015481604001516001600160401b0316610c539190612545565b610c5d9087612564565b600285018054600181810183556000928352602090922084519101805493995084939092839160ff191690836004811115610c9a57610c9a61214f565b021790555060208201518154829061ff001916610100836005811115610cc257610cc261214f565b02179055506040919091015181546001600160401b03909116620100000269ffffffffffffffff00001990911617905550610cfe600182612564565b9050610b7c565b5085905060005b81811015610e1d576000888883818110610d2857610d28612465565b905060400201803603810190610d3e9190612513565b90506003600082600001516005811115610d5a57610d5a61214f565b6005811115610d6b57610d6b61214f565b81526020019081526020016000206000015481602001516001600160401b0316610d959190612545565b610d9f9087612564565b600385018054600181810183556000928352602090922084519101805493995084939092839160ff191690836005811115610ddc57610ddc61214f565b02179055506020919091015181546001600160401b039091166101000268ffffffffffffffff001990911617905550610e16600182612564565b9050610d0c565b506001600160a01b038516610eab57833414610e6b5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610437565b6005546040516001600160a01b039091169085156108fc029086906000818181858888f19350505050158015610ea5573d6000803e3d6000fd5b50611073565b600754600654604051633fb8189b60e11b81526001600160a01b03918216600482015287821660248201526000929190911690637f7031369060440160206040518083038186803b158015610eff57600080fd5b505afa158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3791906125fb565b9050806001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f7457600080fd5b505af1158015610f88573d6000803e3d6000fd5b5050600654604051633ddac95360e01b81526001600160a01b03918216600482015260248101899052600093509084169150633ddac9539060440160206040518083038186803b158015610fdb57600080fd5b505afa158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110139190612618565b9050600081116110555760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610437565b611070336005546001600160a01b038a811692911684611e02565b50505b60008381526004602052604090819020905133917f43ac1f2a7baac3f17814845023bcfa4e393a0cf2086061b04a38049a7b5e207d916110b4918791612705565b60405180910390a25050505050505050505050565b6001546001600160a01b031633146110f35760405162461bcd60e51b815260040161043790612430565b6001600160a01b0381166111495760405162461bcd60e51b815260206004820152601c60248201527f547265617375727920616464726573732063616e6e6f74207a65726f000000006044820152606401610437565b600580546001600160a01b0319166001600160a01b0383169081179091556040517f3c864541ef71378c6229510ed90f376565ee42d9c5e0904a984a9e863e6db44f90600090a250565b6001546001600160a01b031633146111bd5760405162461bcd60e51b815260040161043790612430565b6001600160a01b0381166112225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610437565b61122b81611b1c565b50565b606060008060008451905060005b8181101561128a5785818151811061125657611256612465565b6020026020010151602001516001600160401b0316836112769190612564565b9250611283600182612564565b905061123c565b5085821561151a57826001600160401b038111156112aa576112aa61247b565b6040519080825280602002602001820160405280156112f557816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816112c85790505b50945060005b8281101561151857600087828151811061131757611317612465565b6020026020010151602001516001600160401b0316905060005b8181101561150357604080516020810186905290810185905260600160408051601f19818403018152919052805160209091012093506000611375612710866127d7565b90506000600260008c878151811061138f5761138f612465565b60200260200101516000015160058111156113ac576113ac61214f565b60058111156113bd576113bd61214f565b815260208101919091526040908101600020815160c0810190925260010160068282826020028201916000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116113ea5790505050505050905060005b600660ff821610156114ec578261ffff16828260ff166006811061145257611452612465565b602002015161ffff1611156114da5760405180606001604052808d888151811061147e5761147e612465565b602002602001015160000151600581111561149b5761149b61214f565b815260ff831660208201526040016114b56127108a6127eb565b8152508b87815181106114ca576114ca612465565b60200260200101819052506114ec565b6114e56001826127ff565b905061142c565b5050506001816114fc9190612564565b9050611331565b506115119050600182612564565b90506112fb565b505b8093505050509250929050565b606060008060008551905060005b818110156115835786818151811061154f5761154f612465565b6020026020010151602001516001600160401b03168461156f9190612564565b935061157c600182612564565b9050611535565b5050835160005b818110156115d8578581815181106115a4576115a4612465565b6020026020010151604001516001600160401b0316836115c49190612564565b92506115d1600182612564565b905061158a565b5086821515806115e85750600084115b15611b11576115f78484612564565b6001600160401b0381111561160e5761160e61247b565b60405190808252806020026020018201604052801561166457816020015b6116516040805160608101909152806000815260200160008152600060209091015290565b81526020019060019003908161162c5790505b50945060005b828110156118aa57600087828151811061168657611686612465565b6020026020010151604001516001600160401b0316905060005b8181101561189557604080516020810186905290810185905260600160408051601f198184030181529190528051602090910120935060006116e4612710866127d7565b90506000600360008c87815181106116fe576116fe612465565b602002602001015160200151600581111561171b5761171b61214f565b600581111561172c5761172c61214f565b815260208101919091526040908101600020815160c0810190925260020160068282826020028201916000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116117595790505050505050905060005b600660ff8216101561187e578261ffff16828260ff16600681106117c1576117c1612465565b602002015161ffff16111561186c5760405180606001604052808d88815181106117ed576117ed612465565b602002602001015160200151600581111561180a5761180a61214f565b81526020018d888151811061182157611821612465565b602002602001015160000151600481111561183e5761183e61214f565b81526020018260ff168152508b878151811061185c5761185c612465565b602002602001018190525061187e565b6118776001826127ff565b905061179b565b50505060018161188e9190612564565b90506116a0565b506118a39050600182612564565b905061166a565b508651915060005b82811015611b0f5760008882815181106118ce576118ce612465565b6020026020010151602001516001600160401b0316905060005b81811015611afa57604080516020810186905290810185905260600160408051601f1981840301815291905280516020909101209350600061192c612710866127d7565b90506000600561193e612710886127eb565b61194891906127d7565b60ff16600481111561195c5761195c61214f565b90506000600360008e888151811061197657611976612465565b60200260200101516000015160058111156119935761199361214f565b60058111156119a4576119a461214f565b815260208101919091526040908101600020815160c0810190925260020160068282826020028201916000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116119d15790505050505050905060005b600660ff82161015611ae2578361ffff16828260ff1660068110611a3957611a39612465565b602002015161ffff161115611ad05760405180606001604052808f8981518110611a6557611a65612465565b6020026020010151600001516005811115611a8257611a8261214f565b8152602001846004811115611a9957611a9961214f565b815260ff83166020909101528c611ab08c8a612564565b81518110611ac057611ac0612465565b6020026020010181905250611ae2565b611adb6001826127ff565b9050611a13565b50505050600181611af39190612564565b90506118e8565b50611b089050600182612564565b90506118b2565b505b505050509392505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000828152600460205260409020546001600160a01b0316611bc55760405162461bcd60e51b815260206004820152601060248201526f139bc81c995c5d595cdd08195e1a5cdd60821b6044820152606401610437565b6000828152600460208190526040909120015415611c255760405162461bcd60e51b815260206004820152601f60248201527f52616e646f6d206e756d62657220616c72656164792066756c66696c6c6564006044820152606401610437565b600082815260046020819052604091829020018290555182907f1ca8663227a7fe9919713a01d344afbb434e234f35a3e540a6ad924f88771f3890611c6d9084815260200190565b60405180910390a25050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001611ce9929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401611d169392919061287c565b602060405180830381600087803b158015611d3057600080fd5b505af1158015611d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6891906128ac565b5060008381526020818152604080832054815180840188905280830185905230606082015260808082018390528351808303909101815260a090910190925281519183019190912086845292909152611dc2906001612564565b6000858152602081815260409182902092909255805180830187905280820184905281518082038301815260609091019091528051910120949350505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611e5c908590611e62565b50505050565b6000611eb7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f399092919063ffffffff16565b805190915015611f345780806020019051810190611ed591906128ac565b611f345760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610437565b505050565b6060611f488484600085611f52565b90505b9392505050565b606082471015611fb35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610437565b843b6120015760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610437565b600080866001600160a01b0316858760405161201d91906128ce565b60006040518083038185875af1925050503d806000811461205a576040519150601f19603f3d011682016040523d82523d6000602084013e61205f565b606091505b509150915061206f82828661207a565b979650505050505050565b60608315612089575081611f4b565b8251156120995782518084602001fd5b8160405162461bcd60e51b815260040161043791906128ea565b508054600082559060005260206000209081019061122b91906120ef565b508054600082559060005260206000209081019061122b9190612114565b5b8082111561211057805468ffffffffffffffffff191681556001016120f0565b5090565b5b8082111561211057805469ffffffffffffffffffff19168155600101612115565b60006020828403121561214857600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600681106121755761217561214f565b9052565b600581106121755761217561214f565b600081518084526020808501945080840160005b838110156121e25781516121b2888251612165565b838101516121c2858a0182612179565b5060409081015160ff16908801526060909601959082019060010161219d565b509495945050505050565b60006080820160018060a01b038716835260208681850152604060808186015282875180855260a087019150838901945060005b8181101561225a578551612236848251612165565b8086015160ff16848701528401518484015294840194606090920191600101612221565b5050858103606087015261226e8188612189565b9a9950505050505050505050565b6001600160a01b038116811461122b57600080fd5b803561229c8161227c565b919050565b6000602082840312156122b357600080fd5b8135611f4b8161227c565b80356006811061229c57600080fd5b6000602082840312156122df57600080fd5b611f4b826122be565b600080604083850312156122fb57600080fd5b50508035926020909101359150565b60008083601f84011261231c57600080fd5b5081356001600160401b0381111561233357600080fd5b6020830191508360208260061b850101111561234e57600080fd5b9250929050565b60008060008060008060006080888a03121561237057600080fd5b87356001600160401b038082111561238757600080fd5b6123938b838c0161230a565b909950975060208a01359150808211156123ac57600080fd5b818a0191508a601f8301126123c057600080fd5b8135818111156123cf57600080fd5b8b60206060830285010111156123e457600080fd5b6020830197508096505060408a013591508082111561240257600080fd5b5061240f8a828b0161230a565b9094509250612422905060608901612291565b905092959891949750929550565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80356001600160401b038116811461229c57600080fd5b6000604082840312156124ba57600080fd5b604051604081018181106001600160401b03821117156124ea57634e487b7160e01b600052604160045260246000fd5b6040529050806124f9836122be565b815261250760208401612491565b60208201525092915050565b60006040828403121561252557600080fd5b611f4b83836124a8565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561255f5761255f61252f565b500290565b600082198211156125775761257761252f565b500190565b60006060828403121561258e57600080fd5b604051606081018181106001600160401b03821117156125be57634e487b7160e01b600052604160045260246000fd5b6040528235600581106125d057600080fd5b81526125de602084016122be565b60208201526125ef60408401612491565b60408201529392505050565b60006020828403121561260d57600080fd5b8151611f4b8161227c565b60006020828403121561262a57600080fd5b5051919050565b80546126408360ff8316612165565b6001600160401b038160081c166020840152505050565b6000815480845260208085019450836000528060002060005b838110156121e257815460ff61268889828416612179565b612699858a01828460081c16612165565b5060101c6001600160401b0316604088015260609096019560019182019101612670565b6000815480845260208401935082600052602060002060005b828110156126fb576126e88683612631565b60409590950194600191820191016126d6565b5093949350505050565b8281526040602080830182905283546001600160a01b03168383015260a060608401526001848101805460e08601819052600091825292812090939290919084906101008701905b808310156127705761275f8286612631565b93830193918301919085019061274d565b50603f1994508487820301608088015261278d8160028a01612657565b9350505050818482030160a08501526127a981600387016126bd565b915050600484015460c0840152809150509392505050565b634e487b7160e01b600052601260045260246000fd5b6000826127e6576127e66127c1565b500690565b6000826127fa576127fa6127c1565b500490565b600060ff821660ff84168060ff0382111561281c5761281c61252f565b019392505050565b60005b8381101561283f578181015183820152602001612827565b83811115611e5c5750506000910152565b60008151808452612868816020860160208601612824565b601f01601f19169290920160200192915050565b60018060a01b03841681528260208201526060604082015260006128a36060830184612850565b95945050505050565b6000602082840312156128be57600080fd5b81518015158114611f4b57600080fd5b600082516128e0818460208701612824565b9190910192915050565b602081526000611f4b602083018461285056fea26469706673582212201a1cd2940cf10e23b6cf94b8dda61b0203ec34b7a94e23df6773621faed2281064736f6c63430008090033",
  "devdoc": {
    "author": "Dmitry Yakovlevich",
    "events": {
      "MintRequested(address,bytes32,(address,(uint8,uint64)[],(uint8,uint8,uint64)[],(uint8,uint64)[],uint256))": {
        "details": "emitted in {purchase} or {requestRandomAgain} function.",
        "params": {
          "requestId": "requestId number.",
          "requester": "requester address."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_linkToken": "LINK token address.",
          "_oracleRegistry": "IlluviumOracleRegistry Address.",
          "_treasury": "Treasury Address.",
          "_vrfCoordinator": "Chainlink VRF Coordinator address.",
          "_vrfFee": "Fee.",
          "_vrfKeyhash": "Key Hash.",
          "_weth": "WETH Address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "purchase((uint8,uint64)[],(uint8,uint8,uint64)[],(uint8,uint64)[],address)": {
        "params": {
          "accessoryFullRandomMintParams": "accessory layer full random mint params.",
          "accessorySemiRandomMintParams": "accessory layer semi random mint params.",
          "paymentToken": "payment token address.",
          "portraitMintParams": "portrait layer mint params."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOracleRegistry(address)": {
        "details": "only owner can call this function.",
        "params": {
          "oracleRegistry_": "OracleRegistry Address."
        }
      },
      "setTreasury(address)": {
        "details": "only owner can call this function.",
        "params": {
          "treasury_": "Treasury Address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Minter, this contract is inherited from chainlink VRFConsumerBase, this contract contains purchase function which users interact to mint several base or accessory illuvitars.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MintRequested(address,bytes32,(address,(uint8,uint64)[],(uint8,uint8,uint64)[],(uint8,uint64)[],uint256))": {
        "notice": "event emitted random accessory requested."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor."
      },
      "purchase((uint8,uint64)[],(uint8,uint8,uint64)[],(uint8,uint64)[],address)": {
        "notice": "Mint for Portrait and Accesory items. Users will send ETH or sILV to mint itmes"
      },
      "setOracleRegistry(address)": {
        "notice": "setFunction for OracleRegistry Address."
      },
      "setTreasury(address)": {
        "notice": "setFunction for Treasury Address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 79,
        "contract": "contracts/Minter.sol:Minter",
        "label": "nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2773,
        "contract": "contracts/Minter.sol:Minter",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4695,
        "contract": "contracts/Minter.sol:Minter",
        "label": "portraitMintInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_enum(BoxType)4564,t_struct(PortraitMintInfo)4668_storage)"
      },
      {
        "astId": 4701,
        "contract": "contracts/Minter.sol:Minter",
        "label": "accessoryMintInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(BoxType)4564,t_struct(AccessoryMintInfo)4677_storage)"
      },
      {
        "astId": 4706,
        "contract": "contracts/Minter.sol:Minter",
        "label": "mintRequests",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(MintRequest)4644_storage)"
      },
      {
        "astId": 4708,
        "contract": "contracts/Minter.sol:Minter",
        "label": "treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4710,
        "contract": "contracts/Minter.sol:Minter",
        "label": "weth",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4712,
        "contract": "contracts/Minter.sol:Minter",
        "label": "oracleRegistry",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4714,
        "contract": "contracts/Minter.sol:Minter",
        "label": "vrfKeyHash",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 4716,
        "contract": "contracts/Minter.sol:Minter",
        "label": "vrfFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AccessoryFullRandomMintParams)4627_storage)dyn_storage": {
        "base": "t_struct(AccessoryFullRandomMintParams)4627_storage",
        "encoding": "dynamic_array",
        "label": "struct Minter.AccessoryFullRandomMintParams[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AccessorySemiRandomMintParams)4621_storage)dyn_storage": {
        "base": "t_struct(AccessorySemiRandomMintParams)4621_storage",
        "encoding": "dynamic_array",
        "label": "struct Minter.AccessorySemiRandomMintParams[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PortraitMintParams)4612_storage)dyn_storage": {
        "base": "t_struct(PortraitMintParams)4612_storage",
        "encoding": "dynamic_array",
        "label": "struct Minter.PortraitMintParams[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)6_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[6]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(AccessoryType)4557": {
        "encoding": "inplace",
        "label": "enum AccessoryType",
        "numberOfBytes": "1"
      },
      "t_enum(BoxType)4564": {
        "encoding": "inplace",
        "label": "enum BoxType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(MintRequest)4644_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Minter.MintRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(MintRequest)4644_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(BoxType)4564,t_struct(AccessoryMintInfo)4677_storage)": {
        "encoding": "mapping",
        "key": "t_enum(BoxType)4564",
        "label": "mapping(enum BoxType => struct Minter.AccessoryMintInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccessoryMintInfo)4677_storage"
      },
      "t_mapping(t_enum(BoxType)4564,t_struct(PortraitMintInfo)4668_storage)": {
        "encoding": "mapping",
        "key": "t_enum(BoxType)4564",
        "label": "mapping(enum BoxType => struct Minter.PortraitMintInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PortraitMintInfo)4668_storage"
      },
      "t_struct(AccessoryFullRandomMintParams)4627_storage": {
        "encoding": "inplace",
        "label": "struct Minter.AccessoryFullRandomMintParams",
        "members": [
          {
            "astId": 4624,
            "contract": "contracts/Minter.sol:Minter",
            "label": "boxType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BoxType)4564"
          },
          {
            "astId": 4626,
            "contract": "contracts/Minter.sol:Minter",
            "label": "amount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(AccessoryMintInfo)4677_storage": {
        "encoding": "inplace",
        "label": "struct Minter.AccessoryMintInfo",
        "members": [
          {
            "astId": 4670,
            "contract": "contracts/Minter.sol:Minter",
            "label": "randomPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4672,
            "contract": "contracts/Minter.sol:Minter",
            "label": "semiRandomPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4676,
            "contract": "contracts/Minter.sol:Minter",
            "label": "tierChances",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint16)6_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AccessorySemiRandomMintParams)4621_storage": {
        "encoding": "inplace",
        "label": "struct Minter.AccessorySemiRandomMintParams",
        "members": [
          {
            "astId": 4615,
            "contract": "contracts/Minter.sol:Minter",
            "label": "accessoryType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(AccessoryType)4557"
          },
          {
            "astId": 4618,
            "contract": "contracts/Minter.sol:Minter",
            "label": "boxType",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(BoxType)4564"
          },
          {
            "astId": 4620,
            "contract": "contracts/Minter.sol:Minter",
            "label": "amount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MintRequest)4644_storage": {
        "encoding": "inplace",
        "label": "struct Minter.MintRequest",
        "members": [
          {
            "astId": 4629,
            "contract": "contracts/Minter.sol:Minter",
            "label": "requester",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4633,
            "contract": "contracts/Minter.sol:Minter",
            "label": "portraitMintParams",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(PortraitMintParams)4612_storage)dyn_storage"
          },
          {
            "astId": 4637,
            "contract": "contracts/Minter.sol:Minter",
            "label": "accessorySemiRandomMintParams",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(AccessorySemiRandomMintParams)4621_storage)dyn_storage"
          },
          {
            "astId": 4641,
            "contract": "contracts/Minter.sol:Minter",
            "label": "accessoryFullRandomMintParams",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(AccessoryFullRandomMintParams)4627_storage)dyn_storage"
          },
          {
            "astId": 4643,
            "contract": "contracts/Minter.sol:Minter",
            "label": "randomNumber",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PortraitMintInfo)4668_storage": {
        "encoding": "inplace",
        "label": "struct Minter.PortraitMintInfo",
        "members": [
          {
            "astId": 4663,
            "contract": "contracts/Minter.sol:Minter",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4667,
            "contract": "contracts/Minter.sol:Minter",
            "label": "tierChances",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint16)6_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PortraitMintParams)4612_storage": {
        "encoding": "inplace",
        "label": "struct Minter.PortraitMintParams",
        "members": [
          {
            "astId": 4609,
            "contract": "contracts/Minter.sol:Minter",
            "label": "boxType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BoxType)4564"
          },
          {
            "astId": 4611,
            "contract": "contracts/Minter.sol:Minter",
            "label": "amount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
