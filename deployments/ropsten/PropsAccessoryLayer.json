{
  "address": "0x06278ffCc7Bb5844423Bab184A799B1f9e851C1b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        }
      ],
      "name": "BaseUriUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "sale",
          "type": "bool"
        }
      ],
      "name": "OpenForSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imxMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "imxMinter_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_sale",
          "type": "bool"
        }
      ],
      "name": "markForSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "enum BoxType",
          "name": "boxType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "enum AccessoryType",
          "name": "accessoryType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadataInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "mintingBlob",
          "type": "bytes"
        }
      ],
      "name": "mintFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openForSale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri_",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9bcc0a429086510bfd46865d4245cb9e6f7d9b7c64a73bac305fa8e3c0ff6bff",
  "receipt": {
    "to": null,
    "from": "0xebF5209E76b34553b1cFD5bec2d71Dc8A6559A2e",
    "contractAddress": "0x06278ffCc7Bb5844423Bab184A799B1f9e851C1b",
    "transactionIndex": 2,
    "gasUsed": "373576",
    "logsBloom": "0x000000000000000000000000010000004000000000000000008000000000000000000000080000000000000008000000000000000000000000000000000000000000000000000000000000000000020000010000000010000000000000000000000000000200400000000000000008000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000100020000000000040000000000020000000000000000000000000000000000000000000",
    "blockHash": "0x5e745a07208aa9534043b087f8e29505e112017a4f640c07f5865fd2110bbdf2",
    "transactionHash": "0x9bcc0a429086510bfd46865d4245cb9e6f7d9b7c64a73bac305fa8e3c0ff6bff",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 12384025,
        "transactionHash": "0x9bcc0a429086510bfd46865d4245cb9e6f7d9b7c64a73bac305fa8e3c0ff6bff",
        "address": "0x06278ffCc7Bb5844423Bab184A799B1f9e851C1b",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x00000000000000000000000068e15b993057522358d3655440e0d0327ea8a054"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5e745a07208aa9534043b087f8e29505e112017a4f640c07f5865fd2110bbdf2"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 12384025,
        "transactionHash": "0x9bcc0a429086510bfd46865d4245cb9e6f7d9b7c64a73bac305fa8e3c0ff6bff",
        "address": "0x06278ffCc7Bb5844423Bab184A799B1f9e851C1b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ebf5209e76b34553b1cfd5bec2d71dc8a6559a2e"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x5e745a07208aa9534043b087f8e29505e112017a4f640c07f5865fd2110bbdf2"
      }
    ],
    "events": [
      {
        "transactionIndex": 2,
        "blockNumber": 12384025,
        "transactionHash": "0x9bcc0a429086510bfd46865d4245cb9e6f7d9b7c64a73bac305fa8e3c0ff6bff",
        "address": "0x06278ffCc7Bb5844423Bab184A799B1f9e851C1b",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x00000000000000000000000068e15b993057522358d3655440e0d0327ea8a054"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5e745a07208aa9534043b087f8e29505e112017a4f640c07f5865fd2110bbdf2",
        "args": ["0x68e15b993057522358D3655440E0d0327ea8a054"],
        "event": "Upgraded",
        "eventSignature": "Upgraded(address)"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 12384025,
        "transactionHash": "0x9bcc0a429086510bfd46865d4245cb9e6f7d9b7c64a73bac305fa8e3c0ff6bff",
        "address": "0x06278ffCc7Bb5844423Bab184A799B1f9e851C1b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ebf5209e76b34553b1cfd5bec2d71dc8a6559a2e"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x5e745a07208aa9534043b087f8e29505e112017a4f640c07f5865fd2110bbdf2"
      }
    ],
    "blockNumber": 12384025,
    "cumulativeGasUsed": "2960500",
    "status": 1,
    "byzantium": true
  },
  "args": ["Illuvitar Props Accessory", "IPA", "0x4527BE8f31E2ebFbEF4fCADDb5a17447B27d2aef"],
  "numDeployments": 1,
  "solcInputHash": "06cf6f7d424c880753e44b1d0403b09f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"BaseUriUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sale\",\"type\":\"bool\"}],\"name\":\"OpenForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imxMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"imxMinter_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_sale\",\"type\":\"bool\"}],\"name\":\"markForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"enum BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum AccessoryType\",\"name\":\"accessoryType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadataInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"mintingBlob\",\"type\":\"bytes\"}],\"name\":\"mintFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri_\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Dmitry Yakovlevich\",\"details\":\"inherit BaseIlluvitar\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string,address)\":{\"params\":{\"imxMinter_\":\"NFT Minter Address.\",\"name_\":\"NFT Name.\",\"symbol_\":\"NFT Symbol.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"markForSale(uint256,bool)\":{\"details\":\"Mark for sale\",\"params\":{\"_sale\":\"true or false\",\"tokenId\":\"tokenId\"}},\"mintFor(address,uint256,bytes)\":{\"details\":\"Used to withdraw from IMX\",\"params\":{\"mintingBlob\":\"IMX minting blob string - {tokenId:blueprint}\",\"quantity\":\"quantity - must be 1\",\"to\":\"Recipient address\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseUri(string)\":{\"details\":\"Set base URI\",\"params\":{\"_baseUri_\":\"base URI.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"metadata\":{\"details\":\"Accessory metadata\"}},\"title\":\"Accessory Layer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(string,string,address)\":{\"notice\":\"Initialize Accessory NFT.\"},\"markForSale(uint256,bool)\":{\"notice\":\"Illuvitars cannot be used in game if they are open for sale\"},\"setBaseUri(string)\":{\"notice\":\"only owner can call this function.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AccessoryLayer.sol\":\"AccessoryLayer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@imtbl/imx-contracts/contracts/IMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMintable {\\n    function mintFor(\\n        address to,\\n        uint256 quantity,\\n        bytes calldata mintingBlob\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf072bb2dd72fac9fbdfffd52756621718d32d3253cd942ddfbe1c88d4ed774ab\",\"license\":\"MIT\"},\"@imtbl/imx-contracts/contracts/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary Bytes {\\n    /**\\n     * @dev Converts a `uint256` to a `string`.\\n     * via OraclizeAPI - MIT licence\\n     * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n     */\\n    function fromUint(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + (temp % 10)));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    bytes constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * Index Of\\n     *\\n     * Locates and returns the position of a character within a string starting\\n     * from a defined offset\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string acting as the haystack to be\\n     *              searched\\n     * @param _value The needle to search for, at present this is currently\\n     *               limited to one character\\n     * @param _offset The starting point to start searching from which can start\\n     *                from 0, but must not exceed the length of the string\\n     * @return int The position of the needle starting from 0 and returning -1\\n     *             in the case of no matches found\\n     */\\n    function indexOf(\\n        bytes memory _base,\\n        string memory _value,\\n        uint256 _offset\\n    ) internal pure returns (int256) {\\n        bytes memory _valueBytes = bytes(_value);\\n\\n        assert(_valueBytes.length == 1);\\n\\n        for (uint256 i = _offset; i < _base.length; i++) {\\n            if (_base[i] == _valueBytes[0]) {\\n                return int256(i);\\n            }\\n        }\\n\\n        return -1;\\n    }\\n\\n    function substring(\\n        bytes memory strBytes,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) internal pure returns (string memory) {\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    function toUint(bytes memory b) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            uint256 val = uint256(uint8(b[i]));\\n            if (val >= 48 && val <= 57) {\\n                // input is 0-9\\n                result = result * 10 + (val - 48);\\n            } else {\\n                // invalid character, expecting integer input\\n                revert(\\\"invalid input, only numbers allowed\\\");\\n            }\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa35e6f7fb3abf7501a3590e067919d8eaa95d660da128e8a5a29d00b548998d4\",\"license\":\"MIT\"},\"@imtbl/imx-contracts/contracts/utils/Minting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Bytes.sol\\\";\\n\\nlibrary Minting {\\n    // Split the minting blob into token_id and blueprint portions\\n    // {token_id}:{blueprint}\\n\\n    function split(bytes calldata blob)\\n        internal\\n        pure\\n        returns (uint256, bytes memory)\\n    {\\n        int256 index = Bytes.indexOf(blob, \\\":\\\", 0);\\n        require(index >= 0, \\\"Separator must exist\\\");\\n        // Trim the { and } from the parameters\\n        uint256 tokenID = Bytes.toUint(blob[1:uint256(index) - 1]);\\n        uint256 blueprintLength = blob.length - uint256(index) - 3;\\n        if (blueprintLength == 0) {\\n            return (tokenID, bytes(\\\"\\\"));\\n        }\\n        bytes calldata blueprint = blob[uint256(index) + 2:blob.length - 1];\\n        return (tokenID, blueprint);\\n    }\\n}\\n\",\"keccak256\":\"0x40205ad3ae7575ee24847b05de53f1c1851270b885cffaec46994642cebd3083\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb0fba7a209e01ef5a75bd082cd31b46b417f8572ca87a08475aa60afa01b4801\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc28ec209735cd77cebec87be0ec4586d4cba9002011adf4346e374e60c367756\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x611d1f2720036646366a613a7b6bb85d1527ed3b4fb5ba2db8cfc34f80a37be6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x49915fbc84c030ba425312356c1a0a28f81cdee5ab637f7a264752b52243fec6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8116b65b11e0a65ad6cf40cf2d71d2dacad80ddc37ad42af965fc919afb19e5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5f8d2e5137f7603eeaa0516e5b40dc6e637f179edea8134f1dbef9754c9baf2b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Enumerable_init_unchained();\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal initializer {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xe3bdc0a0942d52ce8d7e968986db04b58f377661520067ea0087a5690afe7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf504eeb1d445ef4e4b4b2726d4776a01299c8e1715962ac2aeccb7be85c45246\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe0091487bb0da2016b050e276b74e83a3a4fa641f65600558281a3dc3ef24994\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd74cdb9a9b704bfd99b4c677f49a170f1b16235f59b4ede98db93ff92f702a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"contracts/AccessoryLayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nimport \\\"./BaseIlluvitar.sol\\\";\\r\\nimport \\\"./DataTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Accessory Layer\\r\\n * @dev inherit BaseIlluvitar\\r\\n * @author Dmitry Yakovlevich\\r\\n */\\r\\ncontract AccessoryLayer is BaseIlluvitar {\\r\\n    /// @dev Accessory Metadata struct\\r\\n    struct Metadata {\\r\\n        BoxType boxType; // box type\\r\\n        uint8 tier; // tier\\r\\n        AccessoryType accessoryType; // accessory type\\r\\n    }\\r\\n\\r\\n    /// @dev Accessory metadata\\r\\n    mapping(uint256 => Metadata) public metadata;\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize Accessory NFT.\\r\\n     * @param name_ NFT Name.\\r\\n     * @param symbol_ NFT Symbol.\\r\\n     * @param imxMinter_ NFT Minter Address.\\r\\n     */\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address imxMinter_\\r\\n    ) external initializer {\\r\\n        __BaseIlluvitar_init(name_, symbol_, imxMinter_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mint Accessory with blueprint.\\r\\n     * @dev blueprint has format of `abc`\\r\\n     *      a : box type\\r\\n            b : tier\\r\\n            c : accessory type\\r\\n     * @param to Recipient address\\r\\n     * @param tokenId Token id\\r\\n     * @param blueprint Accessory blueprint\\r\\n     */\\r\\n    function _mint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory blueprint\\r\\n    ) internal override {\\r\\n        _safeMint(to, tokenId);\\r\\n        if (!metadataInitialized[tokenId]) {\\r\\n            (BoxType boxType, uint8 tier, AccessoryType accessoryType) = _parseBlueprint(blueprint);\\r\\n            metadata[tokenId] = Metadata({ boxType: boxType, tier: tier, accessoryType: accessoryType });\\r\\n            metadataInitialized[tokenId] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Parse blueprint\\r\\n    function _parseBlueprint(bytes memory blueprint)\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            BoxType boxType,\\r\\n            uint8 tier,\\r\\n            AccessoryType accessoryType\\r\\n        )\\r\\n    {\\r\\n        uint8 j = 0;\\r\\n        uint8[] memory parsedData = new uint8[](3);\\r\\n\\r\\n        uint256 len = blueprint.length;\\r\\n        for (uint256 i = 0; i < len; i += 1) {\\r\\n            if (_isDecimal(blueprint[i])) {\\r\\n                parsedData[j] = uint8(blueprint[i]) - 0x30;\\r\\n                j += 1;\\r\\n            }\\r\\n        }\\r\\n        boxType = BoxType(parsedData[0]);\\r\\n        tier = parsedData[1];\\r\\n        accessoryType = AccessoryType(parsedData[2]);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd1e636ba3186680fd6638f6108b4f05e7917d7e3bb67fef9282046b347ead0ef\",\"license\":\"MIT\"},\"contracts/BaseIlluvitar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@imtbl/imx-contracts/contracts/IMintable.sol\\\";\\r\\nimport \\\"@imtbl/imx-contracts/contracts/utils/Minting.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BaseIlluvitar, this contract is inherited from OZ ERC721 contract,\\r\\n * @dev Inherit OZ ERC721Enumerable contract\\r\\n * @dev Use IMX minting model\\r\\n * @dev Contains base functions which can be used in Portrait Layer and Accessory Layer.\\r\\n * @author Dmitry Yakovlevich\\r\\n */\\r\\nabstract contract BaseIlluvitar is ERC721EnumerableUpgradeable, UUPSUpgradeable, OwnableUpgradeable, IMintable {\\r\\n    /// @dev Emitted when base URI is set.\\r\\n    event BaseUriUpdated(string baseUri);\\r\\n    /// @dev Emitted when sale status updated.\\r\\n    event OpenForSale(uint256 indexed tokenId, bool sale);\\r\\n\\r\\n    /// @dev IMX minter contract\\r\\n    address public imxMinter;\\r\\n    /// @dev Open for sale status\\r\\n    mapping(uint256 => bool) public openForSale;\\r\\n    /// @dev Metadata initialized status\\r\\n    mapping(uint256 => bool) public metadataInitialized;\\r\\n    /// @dev base URI\\r\\n    string internal __baseUri;\\r\\n\\r\\n    /**\\r\\n     * @dev Initialize Base Illuvitar.\\r\\n     * @param name_ NFT Name\\r\\n     * @param symbol_ NFT Symbol\\r\\n     * @param imxMinter_ IMX Minter Address\\r\\n     */\\r\\n    function __BaseIlluvitar_init(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address imxMinter_\\r\\n    ) internal initializer {\\r\\n        __ERC721_init(name_, symbol_);\\r\\n        __ERC721Enumerable_init();\\r\\n        __Ownable_init();\\r\\n\\r\\n        require(imxMinter_ != address(0), \\\"Minter cannot zero\\\");\\r\\n        imxMinter = imxMinter_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set base URI\\r\\n     * @notice only owner can call this function.\\r\\n     * @param _baseUri_ base URI.\\r\\n     */\\r\\n    function setBaseUri(string memory _baseUri_) external onlyOwner {\\r\\n        __baseUri = _baseUri_;\\r\\n\\r\\n        emit BaseUriUpdated(_baseUri_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mark for sale\\r\\n     * @notice Illuvitars cannot be used in game if they are open for sale\\r\\n     * @param tokenId tokenId\\r\\n     * @param _sale true or false\\r\\n     */\\r\\n    function markForSale(uint256 tokenId, bool _sale) external {\\r\\n        require(ownerOf(tokenId) == msg.sender, \\\"Not token owner\\\");\\r\\n        openForSale[tokenId] = _sale;\\r\\n    }\\r\\n\\r\\n    /// Return baseURI\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return __baseUri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Used to withdraw from IMX\\r\\n     * @param to Recipient address\\r\\n     * @param quantity quantity - must be 1\\r\\n     * @param mintingBlob IMX minting blob string - {tokenId:blueprint}\\r\\n     */\\r\\n    function mintFor(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes calldata mintingBlob\\r\\n    ) external override {\\r\\n        require(quantity == 1, \\\"Amount must be 1\\\");\\r\\n        require(msg.sender == imxMinter, \\\"caller is not minter\\\");\\r\\n        (uint256 id, bytes memory blueprint) = Minting.split(mintingBlob);\\r\\n        _mint(to, id, blueprint);\\r\\n    }\\r\\n\\r\\n    /// @dev Checks if the byte1 represented character is a decimal number or not (base 10)\\r\\n    function _isDecimal(bytes1 char) internal pure returns (bool) {\\r\\n        return uint8(char) >= 0x30 && uint8(char) < 0x3A;\\r\\n    }\\r\\n\\r\\n    /// @dev Mint interface with blueprint\\r\\n    function _mint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory blueprint\\r\\n    ) internal virtual;\\r\\n\\r\\n    /// @inheritdoc UUPSUpgradeable\\r\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\r\\n\\r\\n    /// @dev UUPSUpgradeable storage gap\\r\\n    uint256[42] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x69c6683e0383c050f4117857c149adaec8b58687fe1b3293ed1f80aefdb92c5d\",\"license\":\"MIT\"},\"contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nenum AccessoryType {\\r\\n    Skin,\\r\\n    Body,\\r\\n    EyeWear,\\r\\n    HeadWear,\\r\\n    Props\\r\\n}\\r\\n\\r\\nenum BoxType {\\r\\n    Virtual,\\r\\n    Bronze,\\r\\n    Silver,\\r\\n    Gold,\\r\\n    Platinum,\\r\\n    Diamond\\r\\n}\\r\\n\",\"keccak256\":\"0x9de3a546228bfb2091c69b7b9be09e8b63c66862eb176a39ccd8b4c8dfd4573b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161320461004560003960008181610a6601528181610aa601528181610b490152610b8901526132046000f3fe6080604052600436106101c25760003560e01c806362f54f29116100f7578063a100560e11610095578063e3684e3911610064578063e3684e3914610515578063e985e9c514610568578063f2fde38b146105b1578063fb91a7d2146105d157600080fd5b8063a100560e14610495578063a22cb465146104b5578063b88d4fde146104d5578063c87b56dd146104f557600080fd5b8063715018a6116100d1578063715018a61461042c5780638da5cb5b1461044157806395d89b4114610460578063a0bcfc7f1461047557600080fd5b806362f54f29146103bb5780636352211e146103ec57806370a082311461040c57600080fd5b806319ee6e3f116101645780633659cfe61161013e5780633659cfe61461034857806342842e0e146103685780634f1ef286146103885780634f6ccce71461039b57600080fd5b806319ee6e3f146102e857806323b872dd146103085780632f745c591461032857600080fd5b8063081812fc116101a0578063081812fc14610240578063095ea7b31461027857806315f514161461029857806318160ddd146102c957600080fd5b806301ffc9a7146101c757806306fdde03146101fc578063077f224a1461021e575b600080fd5b3480156101d357600080fd5b506101e76101e23660046128f0565b6105f2565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b5061021161061d565b6040516101f39190612965565b34801561022a57600080fd5b5061023e610239366004612a37565b6106af565b005b34801561024c57600080fd5b5061026061025b366004612aab565b610732565b6040516001600160a01b0390911681526020016101f3565b34801561028457600080fd5b5061023e610293366004612ac4565b6107c7565b3480156102a457600080fd5b506101e76102b3366004612aab565b6101606020526000908152604090205460ff1681565b3480156102d557600080fd5b506099545b6040519081526020016101f3565b3480156102f457600080fd5b5061023e610303366004612aee565b6108dc565b34801561031457600080fd5b5061023e610323366004612b75565b610995565b34801561033457600080fd5b506102da610343366004612ac4565b6109c6565b34801561035457600080fd5b5061023e610363366004612bb1565b610a5c565b34801561037457600080fd5b5061023e610383366004612b75565b610b24565b61023e610396366004612bcc565b610b3f565b3480156103a757600080fd5b506102da6103b6366004612aab565b610bf8565b3480156103c757600080fd5b506101e76103d6366004612aab565b6101616020526000908152604090205460ff1681565b3480156103f857600080fd5b50610260610407366004612aab565b610c8b565b34801561041857600080fd5b506102da610427366004612bb1565b610d02565b34801561043857600080fd5b5061023e610d89565b34801561044d57600080fd5b5061012d546001600160a01b0316610260565b34801561046c57600080fd5b50610211610dc0565b34801561048157600080fd5b5061023e610490366004612c1a565b610dcf565b3480156104a157600080fd5b5061023e6104b0366004612c5f565b610e49565b3480156104c157600080fd5b5061023e6104d0366004612c8b565b610ebc565b3480156104e157600080fd5b5061023e6104f0366004612cb5565b610ec7565b34801561050157600080fd5b50610211610510366004612aab565b610ef9565b34801561052157600080fd5b50610559610530366004612aab565b61018d6020526000908152604090205460ff808216916101008104821691620100009091041683565b6040516101f393929190612d33565b34801561057457600080fd5b506101e7610583366004612d71565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b3480156105bd57600080fd5b5061023e6105cc366004612bb1565b610fd4565b3480156105dd57600080fd5b5061015f54610260906001600160a01b031681565b60006001600160e01b0319821663780e9d6360e01b148061061757506106178261106d565b92915050565b60606065805461062c90612d9b565b80601f016020809104026020016040519081016040528092919081815260200182805461065890612d9b565b80156106a55780601f1061067a576101008083540402835291602001916106a5565b820191906000526020600020905b81548152906001019060200180831161068857829003601f168201915b5050505050905090565b600054610100900460ff16806106c8575060005460ff16155b6106ed5760405162461bcd60e51b81526004016106e490612dd5565b60405180910390fd5b600054610100900460ff1615801561070f576000805461ffff19166101011790555b61071a8484846110bd565b801561072c576000805461ff00191690555b50505050565b6000818152606760205260408120546001600160a01b03166107ab5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106e4565b506000908152606960205260409020546001600160a01b031690565b60006107d282610c8b565b9050806001600160a01b0316836001600160a01b03160361083f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106e4565b336001600160a01b038216148061085b575061085b8133610583565b6108cd5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106e4565b6108d783836111ac565b505050565b8260011461091f5760405162461bcd60e51b815260206004820152601060248201526f416d6f756e74206d757374206265203160801b60448201526064016106e4565b61015f546001600160a01b031633146109715760405162461bcd60e51b815260206004820152601460248201527331b0b63632b91034b9903737ba1036b4b73a32b960611b60448201526064016106e4565b60008061097e848461121a565b9150915061098d8683836113d8565b505050505050565b61099f33826114ee565b6109bb5760405162461bcd60e51b81526004016106e490612e23565b6108d78383836115e5565b60006109d183610d02565b8210610a335760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016106e4565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610aa45760405162461bcd60e51b81526004016106e490612e74565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ad6611790565b6001600160a01b031614610afc5760405162461bcd60e51b81526004016106e490612ec0565b610b05816117be565b60408051600080825260208201909252610b21918391906117e9565b50565b6108d783838360405180602001604052806000815250610ec7565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b875760405162461bcd60e51b81526004016106e490612e74565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bb9611790565b6001600160a01b031614610bdf5760405162461bcd60e51b81526004016106e490612ec0565b610be8826117be565b610bf4828260016117e9565b5050565b6000610c0360995490565b8210610c665760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016106e4565b60998281548110610c7957610c79612f0c565b90600052602060002001549050919050565b6000818152606760205260408120546001600160a01b0316806106175760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106e4565b60006001600160a01b038216610d6d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106e4565b506001600160a01b031660009081526068602052604090205490565b61012d546001600160a01b03163314610db45760405162461bcd60e51b81526004016106e490612f22565b610dbe6000611934565b565b60606066805461062c90612d9b565b61012d546001600160a01b03163314610dfa5760405162461bcd60e51b81526004016106e490612f22565b8051610e0e90610162906020840190612841565b507f24a9152dc695ecc801ad580886331ee12d7aac0fa2ae341a5ae3c2ccae36cb4f81604051610e3e9190612965565b60405180910390a150565b33610e5383610c8b565b6001600160a01b031614610e9b5760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b60448201526064016106e4565b60009182526101606020526040909120805460ff1916911515919091179055565b610bf4338383611987565b610ed133836114ee565b610eed5760405162461bcd60e51b81526004016106e490612e23565b61072c84848484611a55565b6000818152606760205260409020546060906001600160a01b0316610f785760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106e4565b6000610f82611a88565b90506000815111610fa25760405180602001604052806000815250610fcd565b80610fac84611a98565b604051602001610fbd929190612f57565b6040516020818303038152906040525b9392505050565b61012d546001600160a01b03163314610fff5760405162461bcd60e51b81526004016106e490612f22565b6001600160a01b0381166110645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106e4565b610b2181611934565b60006001600160e01b031982166380ac58cd60e01b148061109e57506001600160e01b03198216635b5e139f60e01b145b8061061757506301ffc9a760e01b6001600160e01b0319831614610617565b600054610100900460ff16806110d6575060005460ff16155b6110f25760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff16158015611114576000805461ffff19166101011790555b61111e8484611b99565b611126611c20565b61112e611ca3565b6001600160a01b0382166111795760405162461bcd60e51b81526020600482015260126024820152714d696e7465722063616e6e6f74207a65726f60701b60448201526064016106e4565b61015f80546001600160a01b0319166001600160a01b038416179055801561072c576000805461ff001916905550505050565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906111e182610c8b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006060600061127885858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040805180820190915260018152601d60f91b602082015293509150611d0a9050565b905060008112156112c25760405162461bcd60e51b815260206004820152601460248201527314d95c185c985d1bdc881b5d5cdd08195e1a5cdd60621b60448201526064016106e4565b600061131c866001876112d58287612f9c565b926112e293929190612fb3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611da192505050565b90506000600361132c8488612f9c565b6113369190612f9c565b90508060000361135d578160405180602001604052806000815250945094505050506113d1565b366000888861136d876002612fdd565b9061137960018c612f9c565b9261138693929190612fb3565b9150915083828281818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250959c50919a50505050505050505050505b9250929050565b6113e28383611e79565b6000828152610161602052604090205460ff166108d757600080600061140784611e93565b925092509250604051806060016040528084600581111561142a5761142a612d1d565b81526020018360ff16815260200182600481111561144a5761144a612d1d565b9052600086815261018d6020526040902081518154829060ff1916600183600581111561147957611479612d1d565b02179055506020820151815460ff9091166101000261ff0019821681178355604084015191839162ff0000191662ffff001990911617620100008360048111156114c5576114c5612d1d565b02179055505050600085815261016160205260409020805460ff19166001179055505050505050565b6000818152606760205260408120546001600160a01b03166115675760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106e4565b600061157283610c8b565b9050806001600160a01b0316846001600160a01b031614806115ad5750836001600160a01b03166115a284610732565b6001600160a01b0316145b806115dd57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166115f882610c8b565b6001600160a01b0316146116605760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106e4565b6001600160a01b0382166116c25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106e4565b6116cd838383611ff0565b6116d86000826111ac565b6001600160a01b0383166000908152606860205260408120805460019290611701908490612f9c565b90915550506001600160a01b038216600090815260686020526040812080546001929061172f908490612fdd565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b61012d546001600160a01b03163314610b215760405162461bcd60e51b81526004016106e490612f22565b60006117f3611790565b90506117fe846120a8565b60008351118061180b5750815b1561181c5761181a848461214d565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661192d57805460ff191660011781556040516001600160a01b038316602482015261189b90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b17905261214d565b50805460ff191681556118ac611790565b6001600160a01b0316826001600160a01b0316146119245760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016106e4565b61192d85612238565b5050505050565b61012d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036119e85760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106e4565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611a608484846115e5565b611a6c84848484612278565b61072c5760405162461bcd60e51b81526004016106e490612ff5565b6060610162805461062c90612d9b565b606081600003611abf5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611ae95780611ad381613047565b9150611ae29050600a83613076565b9150611ac3565b60008167ffffffffffffffff811115611b0457611b04612978565b6040519080825280601f01601f191660200182016040528015611b2e576020820181803683370190505b5090505b84156115dd57611b43600183612f9c565b9150611b50600a8661308a565b611b5b906030612fdd565b60f81b818381518110611b7057611b70612f0c565b60200101906001600160f81b031916908160001a905350611b92600a86613076565b9450611b32565b600054610100900460ff1680611bb2575060005460ff16155b611bce5760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff16158015611bf0576000805461ffff19166101011790555b611bf8612379565b611c00612379565b611c0a83836123e3565b80156108d7576000805461ff0019169055505050565b600054610100900460ff1680611c39575060005460ff16155b611c555760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff16158015611c77576000805461ffff19166101011790555b611c7f612379565b611c87612379565b611c8f612379565b8015610b21576000805461ff001916905550565b600054610100900460ff1680611cbc575060005460ff16155b611cd85760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff16158015611cfa576000805461ffff19166101011790555b611d02612379565b611c8f612478565b81516000908390600114611d2057611d2061309e565b825b8551811015611d945781600081518110611d3e57611d3e612f0c565b602001015160f81c60f81b6001600160f81b031916868281518110611d6557611d65612f0c565b01602001516001600160f81b03191603611d82579150610fcd9050565b80611d8c81613047565b915050611d22565b5060001995945050505050565b600080805b8351811015611e72576000848281518110611dc357611dc3612f0c565b016020015160f81c905060308110801590611ddf575060398111155b15611e0b57611def603082612f9c565b611dfa84600a6130b4565b611e049190612fdd565b9250611e5f565b60405162461bcd60e51b815260206004820152602360248201527f696e76616c696420696e7075742c206f6e6c79206e756d6265727320616c6c6f6044820152621dd95960ea1b60648201526084016106e4565b5080611e6a81613047565b915050611da6565b5092915050565b610bf48282604051806020016040528060008152506124d8565b6040805160038082526080820190925260009182918291829182916020820160608036833701905050865190915060005b81811015611f6757611ef5888281518110611ee157611ee1612f0c565b01602001516001600160f81b03191661250b565b15611f55576030888281518110611f0e57611f0e612f0c565b0160200151611f20919060f81c6130d3565b838560ff1681518110611f3557611f35612f0c565b60ff90921660209283029190910190910152611f526001856130f6565b93505b611f60600182612fdd565b9050611ec4565b5081600081518110611f7b57611f7b612f0c565b602002602001015160ff166005811115611f9757611f97612d1d565b955081600181518110611fac57611fac612f0c565b6020026020010151945081600281518110611fc957611fc9612f0c565b602002602001015160ff166004811115611fe557611fe5612d1d565b959794965050505050565b6001600160a01b03831661204b5761204681609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61206e565b816001600160a01b0316836001600160a01b03161461206e5761206e838261252a565b6001600160a01b038216612085576108d7816125c7565b826001600160a01b0316826001600160a01b0316146108d7576108d78282612676565b803b61210c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106e4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6121ac5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106e4565b600080846001600160a01b0316846040516121c7919061311b565b600060405180830381855af49150503d8060008114612202576040519150601f19603f3d011682016040523d82523d6000602084013e612207565b606091505b509150915061222f82826040518060600160405280602781526020016131a8602791396126ba565b95945050505050565b612241816120a8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60006001600160a01b0384163b1561236e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906122bc903390899088908890600401613137565b6020604051808303816000875af19250505080156122f7575060408051601f3d908101601f191682019092526122f491810190613174565b60015b612354573d808015612325576040519150601f19603f3d011682016040523d82523d6000602084013e61232a565b606091505b50805160000361234c5760405162461bcd60e51b81526004016106e490612ff5565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506115dd565b506001949350505050565b600054610100900460ff1680612392575060005460ff16155b6123ae5760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff16158015611c8f576000805461ffff19166101011790558015610b21576000805461ff001916905550565b600054610100900460ff16806123fc575060005460ff16155b6124185760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff1615801561243a576000805461ffff19166101011790555b825161244d906065906020860190612841565b508151612461906066906020850190612841565b5080156108d7576000805461ff0019169055505050565b600054610100900460ff1680612491575060005460ff16155b6124ad5760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff161580156124cf576000805461ffff19166101011790555b611c8f33611934565b6124e283836126f3565b6124ef6000848484612278565b6108d75760405162461bcd60e51b81526004016106e490612ff5565b6000603060f883901c10801590610617575050603a60f89190911c1090565b6000600161253784610d02565b6125419190612f9c565b600083815260986020526040902054909150808214612594576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b6099546000906125d990600190612f9c565b6000838152609a60205260408120546099805493945090928490811061260157612601612f0c565b90600052602060002001549050806099838154811061262257612622612f0c565b6000918252602080832090910192909255828152609a9091526040808220849055858252812055609980548061265a5761265a613191565b6001900381819060005260206000200160009055905550505050565b600061268183610d02565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b606083156126c9575081610fcd565b8251156126d95782518084602001fd5b8160405162461bcd60e51b81526004016106e49190612965565b6001600160a01b0382166127495760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106e4565b6000818152606760205260409020546001600160a01b0316156127ae5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106e4565b6127ba60008383611ff0565b6001600160a01b03821660009081526068602052604081208054600192906127e3908490612fdd565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461284d90612d9b565b90600052602060002090601f01602090048101928261286f57600085556128b5565b82601f1061288857805160ff19168380011785556128b5565b828001600101855582156128b5579182015b828111156128b557825182559160200191906001019061289a565b506128c19291506128c5565b5090565b5b808211156128c157600081556001016128c6565b6001600160e01b031981168114610b2157600080fd5b60006020828403121561290257600080fd5b8135610fcd816128da565b60005b83811015612928578181015183820152602001612910565b8381111561072c5750506000910152565b6000815180845261295181602086016020860161290d565b601f01601f19169290920160200192915050565b602081526000610fcd6020830184612939565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261299f57600080fd5b813567ffffffffffffffff808211156129ba576129ba612978565b604051601f8301601f19908116603f011681019082821181831017156129e2576129e2612978565b816040528381528660208588010111156129fb57600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b0381168114612a3257600080fd5b919050565b600080600060608486031215612a4c57600080fd5b833567ffffffffffffffff80821115612a6457600080fd5b612a708783880161298e565b94506020860135915080821115612a8657600080fd5b50612a938682870161298e565b925050612aa260408501612a1b565b90509250925092565b600060208284031215612abd57600080fd5b5035919050565b60008060408385031215612ad757600080fd5b612ae083612a1b565b946020939093013593505050565b60008060008060608587031215612b0457600080fd5b612b0d85612a1b565b935060208501359250604085013567ffffffffffffffff80821115612b3157600080fd5b818701915087601f830112612b4557600080fd5b813581811115612b5457600080fd5b886020828501011115612b6657600080fd5b95989497505060200194505050565b600080600060608486031215612b8a57600080fd5b612b9384612a1b565b9250612ba160208501612a1b565b9150604084013590509250925092565b600060208284031215612bc357600080fd5b610fcd82612a1b565b60008060408385031215612bdf57600080fd5b612be883612a1b565b9150602083013567ffffffffffffffff811115612c0457600080fd5b612c108582860161298e565b9150509250929050565b600060208284031215612c2c57600080fd5b813567ffffffffffffffff811115612c4357600080fd5b6115dd8482850161298e565b80358015158114612a3257600080fd5b60008060408385031215612c7257600080fd5b82359150612c8260208401612c4f565b90509250929050565b60008060408385031215612c9e57600080fd5b612ca783612a1b565b9150612c8260208401612c4f565b60008060008060808587031215612ccb57600080fd5b612cd485612a1b565b9350612ce260208601612a1b565b925060408501359150606085013567ffffffffffffffff811115612d0557600080fd5b612d118782880161298e565b91505092959194509250565b634e487b7160e01b600052602160045260246000fd5b6060810160068510612d4757612d47612d1d565b84825260ff8416602083015260058310612d6357612d63612d1d565b826040830152949350505050565b60008060408385031215612d8457600080fd5b612d8d83612a1b565b9150612c8260208401612a1b565b600181811c90821680612daf57607f821691505b602082108103612dcf57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008351612f6981846020880161290d565b835190830190612f7d81836020880161290d565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015612fae57612fae612f86565b500390565b60008085851115612fc357600080fd5b83861115612fd057600080fd5b5050820193919092039150565b60008219821115612ff057612ff0612f86565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006001820161305957613059612f86565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261308557613085613060565b500490565b60008261309957613099613060565b500690565b634e487b7160e01b600052600160045260246000fd5b60008160001904831182151516156130ce576130ce612f86565b500290565b600060ff821660ff8416808210156130ed576130ed612f86565b90039392505050565b600060ff821660ff84168060ff0382111561311357613113612f86565b019392505050565b6000825161312d81846020870161290d565b9190910192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061316a90830184612939565b9695505050505050565b60006020828403121561318657600080fd5b8151610fcd816128da565b634e487b7160e01b600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122042e54992dbdfbaf081c9530b46d271579bd84ed4c45de9b919d4c6901ae9793064736f6c634300080e0033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c806362f54f29116100f7578063a100560e11610095578063e3684e3911610064578063e3684e3914610515578063e985e9c514610568578063f2fde38b146105b1578063fb91a7d2146105d157600080fd5b8063a100560e14610495578063a22cb465146104b5578063b88d4fde146104d5578063c87b56dd146104f557600080fd5b8063715018a6116100d1578063715018a61461042c5780638da5cb5b1461044157806395d89b4114610460578063a0bcfc7f1461047557600080fd5b806362f54f29146103bb5780636352211e146103ec57806370a082311461040c57600080fd5b806319ee6e3f116101645780633659cfe61161013e5780633659cfe61461034857806342842e0e146103685780634f1ef286146103885780634f6ccce71461039b57600080fd5b806319ee6e3f146102e857806323b872dd146103085780632f745c591461032857600080fd5b8063081812fc116101a0578063081812fc14610240578063095ea7b31461027857806315f514161461029857806318160ddd146102c957600080fd5b806301ffc9a7146101c757806306fdde03146101fc578063077f224a1461021e575b600080fd5b3480156101d357600080fd5b506101e76101e23660046128f0565b6105f2565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b5061021161061d565b6040516101f39190612965565b34801561022a57600080fd5b5061023e610239366004612a37565b6106af565b005b34801561024c57600080fd5b5061026061025b366004612aab565b610732565b6040516001600160a01b0390911681526020016101f3565b34801561028457600080fd5b5061023e610293366004612ac4565b6107c7565b3480156102a457600080fd5b506101e76102b3366004612aab565b6101606020526000908152604090205460ff1681565b3480156102d557600080fd5b506099545b6040519081526020016101f3565b3480156102f457600080fd5b5061023e610303366004612aee565b6108dc565b34801561031457600080fd5b5061023e610323366004612b75565b610995565b34801561033457600080fd5b506102da610343366004612ac4565b6109c6565b34801561035457600080fd5b5061023e610363366004612bb1565b610a5c565b34801561037457600080fd5b5061023e610383366004612b75565b610b24565b61023e610396366004612bcc565b610b3f565b3480156103a757600080fd5b506102da6103b6366004612aab565b610bf8565b3480156103c757600080fd5b506101e76103d6366004612aab565b6101616020526000908152604090205460ff1681565b3480156103f857600080fd5b50610260610407366004612aab565b610c8b565b34801561041857600080fd5b506102da610427366004612bb1565b610d02565b34801561043857600080fd5b5061023e610d89565b34801561044d57600080fd5b5061012d546001600160a01b0316610260565b34801561046c57600080fd5b50610211610dc0565b34801561048157600080fd5b5061023e610490366004612c1a565b610dcf565b3480156104a157600080fd5b5061023e6104b0366004612c5f565b610e49565b3480156104c157600080fd5b5061023e6104d0366004612c8b565b610ebc565b3480156104e157600080fd5b5061023e6104f0366004612cb5565b610ec7565b34801561050157600080fd5b50610211610510366004612aab565b610ef9565b34801561052157600080fd5b50610559610530366004612aab565b61018d6020526000908152604090205460ff808216916101008104821691620100009091041683565b6040516101f393929190612d33565b34801561057457600080fd5b506101e7610583366004612d71565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b3480156105bd57600080fd5b5061023e6105cc366004612bb1565b610fd4565b3480156105dd57600080fd5b5061015f54610260906001600160a01b031681565b60006001600160e01b0319821663780e9d6360e01b148061061757506106178261106d565b92915050565b60606065805461062c90612d9b565b80601f016020809104026020016040519081016040528092919081815260200182805461065890612d9b565b80156106a55780601f1061067a576101008083540402835291602001916106a5565b820191906000526020600020905b81548152906001019060200180831161068857829003601f168201915b5050505050905090565b600054610100900460ff16806106c8575060005460ff16155b6106ed5760405162461bcd60e51b81526004016106e490612dd5565b60405180910390fd5b600054610100900460ff1615801561070f576000805461ffff19166101011790555b61071a8484846110bd565b801561072c576000805461ff00191690555b50505050565b6000818152606760205260408120546001600160a01b03166107ab5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106e4565b506000908152606960205260409020546001600160a01b031690565b60006107d282610c8b565b9050806001600160a01b0316836001600160a01b03160361083f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106e4565b336001600160a01b038216148061085b575061085b8133610583565b6108cd5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106e4565b6108d783836111ac565b505050565b8260011461091f5760405162461bcd60e51b815260206004820152601060248201526f416d6f756e74206d757374206265203160801b60448201526064016106e4565b61015f546001600160a01b031633146109715760405162461bcd60e51b815260206004820152601460248201527331b0b63632b91034b9903737ba1036b4b73a32b960611b60448201526064016106e4565b60008061097e848461121a565b9150915061098d8683836113d8565b505050505050565b61099f33826114ee565b6109bb5760405162461bcd60e51b81526004016106e490612e23565b6108d78383836115e5565b60006109d183610d02565b8210610a335760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016106e4565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610aa45760405162461bcd60e51b81526004016106e490612e74565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ad6611790565b6001600160a01b031614610afc5760405162461bcd60e51b81526004016106e490612ec0565b610b05816117be565b60408051600080825260208201909252610b21918391906117e9565b50565b6108d783838360405180602001604052806000815250610ec7565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b875760405162461bcd60e51b81526004016106e490612e74565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bb9611790565b6001600160a01b031614610bdf5760405162461bcd60e51b81526004016106e490612ec0565b610be8826117be565b610bf4828260016117e9565b5050565b6000610c0360995490565b8210610c665760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016106e4565b60998281548110610c7957610c79612f0c565b90600052602060002001549050919050565b6000818152606760205260408120546001600160a01b0316806106175760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106e4565b60006001600160a01b038216610d6d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106e4565b506001600160a01b031660009081526068602052604090205490565b61012d546001600160a01b03163314610db45760405162461bcd60e51b81526004016106e490612f22565b610dbe6000611934565b565b60606066805461062c90612d9b565b61012d546001600160a01b03163314610dfa5760405162461bcd60e51b81526004016106e490612f22565b8051610e0e90610162906020840190612841565b507f24a9152dc695ecc801ad580886331ee12d7aac0fa2ae341a5ae3c2ccae36cb4f81604051610e3e9190612965565b60405180910390a150565b33610e5383610c8b565b6001600160a01b031614610e9b5760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b60448201526064016106e4565b60009182526101606020526040909120805460ff1916911515919091179055565b610bf4338383611987565b610ed133836114ee565b610eed5760405162461bcd60e51b81526004016106e490612e23565b61072c84848484611a55565b6000818152606760205260409020546060906001600160a01b0316610f785760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106e4565b6000610f82611a88565b90506000815111610fa25760405180602001604052806000815250610fcd565b80610fac84611a98565b604051602001610fbd929190612f57565b6040516020818303038152906040525b9392505050565b61012d546001600160a01b03163314610fff5760405162461bcd60e51b81526004016106e490612f22565b6001600160a01b0381166110645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106e4565b610b2181611934565b60006001600160e01b031982166380ac58cd60e01b148061109e57506001600160e01b03198216635b5e139f60e01b145b8061061757506301ffc9a760e01b6001600160e01b0319831614610617565b600054610100900460ff16806110d6575060005460ff16155b6110f25760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff16158015611114576000805461ffff19166101011790555b61111e8484611b99565b611126611c20565b61112e611ca3565b6001600160a01b0382166111795760405162461bcd60e51b81526020600482015260126024820152714d696e7465722063616e6e6f74207a65726f60701b60448201526064016106e4565b61015f80546001600160a01b0319166001600160a01b038416179055801561072c576000805461ff001916905550505050565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906111e182610c8b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006060600061127885858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040805180820190915260018152601d60f91b602082015293509150611d0a9050565b905060008112156112c25760405162461bcd60e51b815260206004820152601460248201527314d95c185c985d1bdc881b5d5cdd08195e1a5cdd60621b60448201526064016106e4565b600061131c866001876112d58287612f9c565b926112e293929190612fb3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611da192505050565b90506000600361132c8488612f9c565b6113369190612f9c565b90508060000361135d578160405180602001604052806000815250945094505050506113d1565b366000888861136d876002612fdd565b9061137960018c612f9c565b9261138693929190612fb3565b9150915083828281818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250959c50919a50505050505050505050505b9250929050565b6113e28383611e79565b6000828152610161602052604090205460ff166108d757600080600061140784611e93565b925092509250604051806060016040528084600581111561142a5761142a612d1d565b81526020018360ff16815260200182600481111561144a5761144a612d1d565b9052600086815261018d6020526040902081518154829060ff1916600183600581111561147957611479612d1d565b02179055506020820151815460ff9091166101000261ff0019821681178355604084015191839162ff0000191662ffff001990911617620100008360048111156114c5576114c5612d1d565b02179055505050600085815261016160205260409020805460ff19166001179055505050505050565b6000818152606760205260408120546001600160a01b03166115675760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106e4565b600061157283610c8b565b9050806001600160a01b0316846001600160a01b031614806115ad5750836001600160a01b03166115a284610732565b6001600160a01b0316145b806115dd57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166115f882610c8b565b6001600160a01b0316146116605760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106e4565b6001600160a01b0382166116c25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106e4565b6116cd838383611ff0565b6116d86000826111ac565b6001600160a01b0383166000908152606860205260408120805460019290611701908490612f9c565b90915550506001600160a01b038216600090815260686020526040812080546001929061172f908490612fdd565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b61012d546001600160a01b03163314610b215760405162461bcd60e51b81526004016106e490612f22565b60006117f3611790565b90506117fe846120a8565b60008351118061180b5750815b1561181c5761181a848461214d565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661192d57805460ff191660011781556040516001600160a01b038316602482015261189b90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b17905261214d565b50805460ff191681556118ac611790565b6001600160a01b0316826001600160a01b0316146119245760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016106e4565b61192d85612238565b5050505050565b61012d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036119e85760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106e4565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611a608484846115e5565b611a6c84848484612278565b61072c5760405162461bcd60e51b81526004016106e490612ff5565b6060610162805461062c90612d9b565b606081600003611abf5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611ae95780611ad381613047565b9150611ae29050600a83613076565b9150611ac3565b60008167ffffffffffffffff811115611b0457611b04612978565b6040519080825280601f01601f191660200182016040528015611b2e576020820181803683370190505b5090505b84156115dd57611b43600183612f9c565b9150611b50600a8661308a565b611b5b906030612fdd565b60f81b818381518110611b7057611b70612f0c565b60200101906001600160f81b031916908160001a905350611b92600a86613076565b9450611b32565b600054610100900460ff1680611bb2575060005460ff16155b611bce5760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff16158015611bf0576000805461ffff19166101011790555b611bf8612379565b611c00612379565b611c0a83836123e3565b80156108d7576000805461ff0019169055505050565b600054610100900460ff1680611c39575060005460ff16155b611c555760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff16158015611c77576000805461ffff19166101011790555b611c7f612379565b611c87612379565b611c8f612379565b8015610b21576000805461ff001916905550565b600054610100900460ff1680611cbc575060005460ff16155b611cd85760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff16158015611cfa576000805461ffff19166101011790555b611d02612379565b611c8f612478565b81516000908390600114611d2057611d2061309e565b825b8551811015611d945781600081518110611d3e57611d3e612f0c565b602001015160f81c60f81b6001600160f81b031916868281518110611d6557611d65612f0c565b01602001516001600160f81b03191603611d82579150610fcd9050565b80611d8c81613047565b915050611d22565b5060001995945050505050565b600080805b8351811015611e72576000848281518110611dc357611dc3612f0c565b016020015160f81c905060308110801590611ddf575060398111155b15611e0b57611def603082612f9c565b611dfa84600a6130b4565b611e049190612fdd565b9250611e5f565b60405162461bcd60e51b815260206004820152602360248201527f696e76616c696420696e7075742c206f6e6c79206e756d6265727320616c6c6f6044820152621dd95960ea1b60648201526084016106e4565b5080611e6a81613047565b915050611da6565b5092915050565b610bf48282604051806020016040528060008152506124d8565b6040805160038082526080820190925260009182918291829182916020820160608036833701905050865190915060005b81811015611f6757611ef5888281518110611ee157611ee1612f0c565b01602001516001600160f81b03191661250b565b15611f55576030888281518110611f0e57611f0e612f0c565b0160200151611f20919060f81c6130d3565b838560ff1681518110611f3557611f35612f0c565b60ff90921660209283029190910190910152611f526001856130f6565b93505b611f60600182612fdd565b9050611ec4565b5081600081518110611f7b57611f7b612f0c565b602002602001015160ff166005811115611f9757611f97612d1d565b955081600181518110611fac57611fac612f0c565b6020026020010151945081600281518110611fc957611fc9612f0c565b602002602001015160ff166004811115611fe557611fe5612d1d565b959794965050505050565b6001600160a01b03831661204b5761204681609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61206e565b816001600160a01b0316836001600160a01b03161461206e5761206e838261252a565b6001600160a01b038216612085576108d7816125c7565b826001600160a01b0316826001600160a01b0316146108d7576108d78282612676565b803b61210c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106e4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6121ac5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106e4565b600080846001600160a01b0316846040516121c7919061311b565b600060405180830381855af49150503d8060008114612202576040519150601f19603f3d011682016040523d82523d6000602084013e612207565b606091505b509150915061222f82826040518060600160405280602781526020016131a8602791396126ba565b95945050505050565b612241816120a8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60006001600160a01b0384163b1561236e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906122bc903390899088908890600401613137565b6020604051808303816000875af19250505080156122f7575060408051601f3d908101601f191682019092526122f491810190613174565b60015b612354573d808015612325576040519150601f19603f3d011682016040523d82523d6000602084013e61232a565b606091505b50805160000361234c5760405162461bcd60e51b81526004016106e490612ff5565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506115dd565b506001949350505050565b600054610100900460ff1680612392575060005460ff16155b6123ae5760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff16158015611c8f576000805461ffff19166101011790558015610b21576000805461ff001916905550565b600054610100900460ff16806123fc575060005460ff16155b6124185760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff1615801561243a576000805461ffff19166101011790555b825161244d906065906020860190612841565b508151612461906066906020850190612841565b5080156108d7576000805461ff0019169055505050565b600054610100900460ff1680612491575060005460ff16155b6124ad5760405162461bcd60e51b81526004016106e490612dd5565b600054610100900460ff161580156124cf576000805461ffff19166101011790555b611c8f33611934565b6124e283836126f3565b6124ef6000848484612278565b6108d75760405162461bcd60e51b81526004016106e490612ff5565b6000603060f883901c10801590610617575050603a60f89190911c1090565b6000600161253784610d02565b6125419190612f9c565b600083815260986020526040902054909150808214612594576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b6099546000906125d990600190612f9c565b6000838152609a60205260408120546099805493945090928490811061260157612601612f0c565b90600052602060002001549050806099838154811061262257612622612f0c565b6000918252602080832090910192909255828152609a9091526040808220849055858252812055609980548061265a5761265a613191565b6001900381819060005260206000200160009055905550505050565b600061268183610d02565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b606083156126c9575081610fcd565b8251156126d95782518084602001fd5b8160405162461bcd60e51b81526004016106e49190612965565b6001600160a01b0382166127495760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106e4565b6000818152606760205260409020546001600160a01b0316156127ae5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106e4565b6127ba60008383611ff0565b6001600160a01b03821660009081526068602052604081208054600192906127e3908490612fdd565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461284d90612d9b565b90600052602060002090601f01602090048101928261286f57600085556128b5565b82601f1061288857805160ff19168380011785556128b5565b828001600101855582156128b5579182015b828111156128b557825182559160200191906001019061289a565b506128c19291506128c5565b5090565b5b808211156128c157600081556001016128c6565b6001600160e01b031981168114610b2157600080fd5b60006020828403121561290257600080fd5b8135610fcd816128da565b60005b83811015612928578181015183820152602001612910565b8381111561072c5750506000910152565b6000815180845261295181602086016020860161290d565b601f01601f19169290920160200192915050565b602081526000610fcd6020830184612939565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261299f57600080fd5b813567ffffffffffffffff808211156129ba576129ba612978565b604051601f8301601f19908116603f011681019082821181831017156129e2576129e2612978565b816040528381528660208588010111156129fb57600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b0381168114612a3257600080fd5b919050565b600080600060608486031215612a4c57600080fd5b833567ffffffffffffffff80821115612a6457600080fd5b612a708783880161298e565b94506020860135915080821115612a8657600080fd5b50612a938682870161298e565b925050612aa260408501612a1b565b90509250925092565b600060208284031215612abd57600080fd5b5035919050565b60008060408385031215612ad757600080fd5b612ae083612a1b565b946020939093013593505050565b60008060008060608587031215612b0457600080fd5b612b0d85612a1b565b935060208501359250604085013567ffffffffffffffff80821115612b3157600080fd5b818701915087601f830112612b4557600080fd5b813581811115612b5457600080fd5b886020828501011115612b6657600080fd5b95989497505060200194505050565b600080600060608486031215612b8a57600080fd5b612b9384612a1b565b9250612ba160208501612a1b565b9150604084013590509250925092565b600060208284031215612bc357600080fd5b610fcd82612a1b565b60008060408385031215612bdf57600080fd5b612be883612a1b565b9150602083013567ffffffffffffffff811115612c0457600080fd5b612c108582860161298e565b9150509250929050565b600060208284031215612c2c57600080fd5b813567ffffffffffffffff811115612c4357600080fd5b6115dd8482850161298e565b80358015158114612a3257600080fd5b60008060408385031215612c7257600080fd5b82359150612c8260208401612c4f565b90509250929050565b60008060408385031215612c9e57600080fd5b612ca783612a1b565b9150612c8260208401612c4f565b60008060008060808587031215612ccb57600080fd5b612cd485612a1b565b9350612ce260208601612a1b565b925060408501359150606085013567ffffffffffffffff811115612d0557600080fd5b612d118782880161298e565b91505092959194509250565b634e487b7160e01b600052602160045260246000fd5b6060810160068510612d4757612d47612d1d565b84825260ff8416602083015260058310612d6357612d63612d1d565b826040830152949350505050565b60008060408385031215612d8457600080fd5b612d8d83612a1b565b9150612c8260208401612a1b565b600181811c90821680612daf57607f821691505b602082108103612dcf57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008351612f6981846020880161290d565b835190830190612f7d81836020880161290d565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015612fae57612fae612f86565b500390565b60008085851115612fc357600080fd5b83861115612fd057600080fd5b5050820193919092039150565b60008219821115612ff057612ff0612f86565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006001820161305957613059612f86565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261308557613085613060565b500490565b60008261309957613099613060565b500690565b634e487b7160e01b600052600160045260246000fd5b60008160001904831182151516156130ce576130ce612f86565b500290565b600060ff821660ff8416808210156130ed576130ed612f86565b90039392505050565b600060ff821660ff84168060ff0382111561311357613113612f86565b019392505050565b6000825161312d81846020870161290d565b9190910192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061316a90830184612939565b9695505050505050565b60006020828403121561318657600080fd5b8151610fcd816128da565b634e487b7160e01b600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122042e54992dbdfbaf081c9530b46d271579bd84ed4c45de9b919d4c6901ae9793064736f6c634300080e0033",
  "devdoc": {
    "author": "Dmitry Yakovlevich",
    "details": "inherit BaseIlluvitar",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string,address)": {
        "params": {
          "imxMinter_": "NFT Minter Address.",
          "name_": "NFT Name.",
          "symbol_": "NFT Symbol."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "markForSale(uint256,bool)": {
        "details": "Mark for sale",
        "params": {
          "_sale": "true or false",
          "tokenId": "tokenId"
        }
      },
      "mintFor(address,uint256,bytes)": {
        "details": "Used to withdraw from IMX",
        "params": {
          "mintingBlob": "IMX minting blob string - {tokenId:blueprint}",
          "quantity": "quantity - must be 1",
          "to": "Recipient address"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseUri(string)": {
        "details": "Set base URI",
        "params": {
          "_baseUri_": "base URI."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "metadata": {
        "details": "Accessory metadata"
      }
    },
    "title": "Accessory Layer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(string,string,address)": {
        "notice": "Initialize Accessory NFT."
      },
      "markForSale(uint256,bool)": {
        "notice": "Illuvitars cannot be used in game if they are open for sale"
      },
      "setBaseUri(string)": {
        "notice": "only owner can call this function."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1089,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1092,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3249,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3558,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1571,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1573,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1577,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1581,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1585,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1591,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2402,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 2576,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2580,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2583,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2587,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2902,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 1072,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1239,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 560,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "_owner",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 674,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3789,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "imxMinter",
        "offset": 0,
        "slot": "351",
        "type": "t_address"
      },
      {
        "astId": 3794,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "openForSale",
        "offset": 0,
        "slot": "352",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3799,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "metadataInitialized",
        "offset": 0,
        "slot": "353",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3802,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "__baseUri",
        "offset": 0,
        "slot": "354",
        "type": "t_string_storage"
      },
      {
        "astId": 3982,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "__gap",
        "offset": 0,
        "slot": "355",
        "type": "t_array(t_uint256)42_storage"
      },
      {
        "astId": 3593,
        "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
        "label": "metadata",
        "offset": 0,
        "slot": "397",
        "type": "t_mapping(t_uint256,t_struct(Metadata)3587_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)42_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[42]",
        "numberOfBytes": "1344"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(AccessoryType)3991": {
        "encoding": "inplace",
        "label": "enum AccessoryType",
        "numberOfBytes": "1"
      },
      "t_enum(BoxType)3998": {
        "encoding": "inplace",
        "label": "enum BoxType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Metadata)3587_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AccessoryLayer.Metadata)",
        "numberOfBytes": "32",
        "value": "t_struct(Metadata)3587_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Metadata)3587_storage": {
        "encoding": "inplace",
        "label": "struct AccessoryLayer.Metadata",
        "members": [
          {
            "astId": 3581,
            "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
            "label": "boxType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BoxType)3998"
          },
          {
            "astId": 3583,
            "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
            "label": "tier",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3586,
            "contract": "contracts/AccessoryLayer.sol:AccessoryLayer",
            "label": "accessoryType",
            "offset": 2,
            "slot": "0",
            "type": "t_enum(AccessoryType)3991"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
